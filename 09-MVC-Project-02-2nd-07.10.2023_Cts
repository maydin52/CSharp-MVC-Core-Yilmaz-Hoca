



1. Area - Identity - Pages - Account - Register.cshtml içine, AppUser modeline eklenen özellikleri buraya ekleyeceğiz. Razor Pages yaklaşımı. MVC paterni veya patern yok. Düz MVC de de var.
Register.cshtml içindeki Input modelleri aşağıdaki şekilde bağlıyoruz; Standardın dışına çıktığımız için bu konuya girdik.
Yazılım geliştirme süreçleri çok maliyetli.
%80 kopya döndüğü için çok farketmiyoruz belki ama.


1.a Register.cshtml.cs içinde InputModel classı içine aşağıdakileri ekledik.
DİKKAT!!! ErrorMessage içini boş brakırsan hata alırsın.

public class InputModel
{
            [Required]
            [Display(Name = "FirstName")]
            public string FirstName { get; set; }

            [Required]
            [Display(Name = "LastName")]
            public string LastName { get; set; }

            [Required]
            //[MinLength(10, ErrorMessage =""),MaxLength(200,ErrorMessage ="")]
            [Display(Name = "Address")]
            public string Address { get; set; }



1.b Register.cshtml içinde form tagi altına aşağıdakileri ekledik.



            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            <div class="form-floating">
                <input asp-for="Input.FirstName" class="form-control"  aria-required="true" />
                <label asp-for="Input.FirstName"></label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.LastName" class="form-control"  aria-required="true" />
                <label asp-for="Input.LastName"></label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.Address" class="form-control" aria-required="true" />
                <label asp-for="Input.Address"></label>
                <span asp-validation-for="Input.Address" class="text-danger"></span>
            </div>


1.c Register.cshtml.cs içinde user. ile başlayan propertyler eklenmeden önce aşağıdaki kontrol yapıldı.
DİKKAT!!!

Program.cs içindeki aşağıda yazılı olan yazı içindeki RequireConfirmedAccount = false; olduğundan emin olduk.
//AppUser=> IdentityUser Yerine Kullanılacak...
builder.Services.AddDefaultIdentity<AppUser>(options => { 
    
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequiredLength = 7;
})
    .AddEntityFrameworkStores<ApplicationDbContext>();


Daha sonra; Register.cshtml.cs içinde user. ile başlayan propertyler eklendi.

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = CreateUser(); altına

                user.FirstName = Input.FirstName;
                user.LastName=Input.LastName;
                user.Address = Input.Address;




1.d Register.cshtml.cs içinde yorum satırına alındı. Mail gönderme ile ilgili kod.

                    //var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    //code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    //var callbackUrl = Url.Page(
                    //    "/Account/ConfirmEmail",
                    //    pageHandler: null,
                    //    values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                    //    protocol: Request.Scheme);

                    //await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                    //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

Oturum yapıp yapamayacağımızın testini yaptık. Yeni kullanıcı oluşturduk ve griş yaptık.



2. SQL içinden tablolardaki tipleri kontrol ettik ve değiştirilmesi gerekenleri gördük.

Context sınıfında ilişki ve ilk değer atamalarını yaptık.

protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            //Tum entitylerin ozellikleri buradan verilebilinir...


            builder.Entity<Category>().Property(x => x.CategoryName)
                                      .IsRequired()
                                      .HasMaxLength(30)
                                      .HasColumnType("varchar");
            
            //ilk deger atama....
            builder.Entity<Category>().HasData(
                new Category { CategoryID=1, CategoryName="Roman" },
                new Category { CategoryID=2, CategoryName="Hikaye" },
                new Category { CategoryID=3, CategoryName="Deneme" }
                );


            builder.Entity<Book>().Property(x => x.BookName).IsRequired().HasMaxLength(150).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.CoverImagePath).IsRequired().HasMaxLength(30).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.ReleaseDate).IsRequired(false).HasColumnType("smalldatetime");
            builder.Entity<Book>().Property(x => x.Price).IsRequired().HasColumnType("money");
            
        }





Delegeler;

