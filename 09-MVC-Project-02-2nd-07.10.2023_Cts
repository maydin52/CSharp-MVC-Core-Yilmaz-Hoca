



1. Area - Identity - Pages - Account - Register.cshtml içine, AppUser modeline eklenen özellikleri buraya ekleyeceğiz. Razor Pages yaklaşımı. MVC paterni veya patern yok. Düz MVC de de var.
Register.cshtml içindeki Input modelleri aşağıdaki şekilde bağlıyoruz; Standardın dışına çıktığımız için bu konuya girdik.
Yazılım geliştirme süreçleri çok maliyetli.
%80 kopya döndüğü için çok farketmiyoruz belki ama.


1.a Register.cshtml.cs içinde InputModel classı içine aşağıdakileri ekledik.
DİKKAT!!! ErrorMessage içini boş brakırsan hata alırsın.

public class InputModel
{
            [Required]
            [Display(Name = "FirstName")]
            public string FirstName { get; set; }

            [Required]
            [Display(Name = "LastName")]
            public string LastName { get; set; }

            [Required]
            //[MinLength(10, ErrorMessage =""),MaxLength(200,ErrorMessage ="")]
            [Display(Name = "Address")]
            public string Address { get; set; }



1.b Register.cshtml içinde form tagi altına aşağıdakileri ekledik.



            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            <div class="form-floating">
                <input asp-for="Input.FirstName" class="form-control"  aria-required="true" />
                <label asp-for="Input.FirstName"></label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.LastName" class="form-control"  aria-required="true" />
                <label asp-for="Input.LastName"></label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.Address" class="form-control" aria-required="true" />
                <label asp-for="Input.Address"></label>
                <span asp-validation-for="Input.Address" class="text-danger"></span>
            </div>


1.c Register.cshtml.cs içinde user. ile başlayan propertyler eklenmeden önce aşağıdaki kontrol yapıldı.
DİKKAT!!!

Program.cs içindeki aşağıda yazılı olan yazı içindeki RequireConfirmedAccount = false; olduğundan emin olduk.
//AppUser=> IdentityUser Yerine Kullanılacak...
builder.Services.AddDefaultIdentity<AppUser>(options => { 
    
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequiredLength = 7;
})
    .AddEntityFrameworkStores<ApplicationDbContext>();


Daha sonra; Register.cshtml.cs içinde user. ile başlayan propertyler eklendi.

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = CreateUser(); altına

                user.FirstName = Input.FirstName;
                user.LastName=Input.LastName;
                user.Address = Input.Address;




1.d Register.cshtml.cs içinde yorum satırına alındı. Mail gönderme ile ilgili kod.

                    //var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    //code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    //var callbackUrl = Url.Page(
                    //    "/Account/ConfirmEmail",
                    //    pageHandler: null,
                    //    values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                    //    protocol: Request.Scheme);

                    //await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                    //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

Oturum yapıp yapamayacağımızın testini yaptık. Yeni kullanıcı oluşturduk ve griş yaptık.

-----

2. SQL içinden tablolardaki tipleri kontrol ettik ve değiştirilmesi gerekenleri gördük.

Context sınıfında ilişki ve ilk değer atamalarını yaptık.

protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            //Tum entitylerin ozellikleri buradan verilebilinir...


            builder.Entity<Category>().Property(x => x.CategoryName)
                                      .IsRequired()
                                      .HasMaxLength(30)
                                      .HasColumnType("varchar");
            
            //ilk deger atama....
            builder.Entity<Category>().HasData(
                new Category { CategoryID=1, CategoryName="Roman" },
                new Category { CategoryID=2, CategoryName="Hikaye" },
                new Category { CategoryID=3, CategoryName="Deneme" }
                );


            builder.Entity<Book>().Property(x => x.BookName).IsRequired().HasMaxLength(150).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.CoverImagePath).IsRequired().HasMaxLength(30).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.ReleaseDate).IsRequired(false).HasColumnType("smalldatetime");
            builder.Entity<Book>().Property(x => x.Price).IsRequired().HasColumnType("money");
            
        }

- Migration oluşturduk.

------

3. Admin için Area oluşturacağız. Çünkü admin sayfası son kullanıcınınkinden farklı olmalı. CRUD veya kontrol paneli gibi.
Identity için kendisi zaten oluşturmuştu. Biz Admin için olşuturacağız.
Projeyi fiziksel ve mantıksal olarak ayırıyor. Area ların kendi mvc leri var.

3.a Solution ağacının en üstünde sağ tık - Add - New Scaffolded Item - Sol taraftan Common seç - ortadan MVC Area seç - Add - isim ver AdminPanel - Add
Çıkan kodu kopyala. Kodu kaybedersen ağaçta altta txt dosyası içinde.

3.b Program.cs içinde app.MapControllerRoute( gerisine yapıştır.
Bu olmadan sayfaya ulaşılamazdı, denedik.


Bu area altından aşağıdaki controlleri oluşturduk.

    [Area("AdminPanel")]
    public class PanelController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }

Bu controllerin view ini oluşturduk.

<h1>Admin Panel Sayfasi....</h1>

<ul>
    <li><a asp-area="AdminPanel" asp-controller="Categories" asp-action="Index">Kategoriler</a></li>
    <li>Kitaplar</li>
    <li>Yazarlar</li>
</ul>

DİKKAT!!! LAYOUT GELMEDİ. AREA ALTINDAKİ IDENTITY ALTINDAKİ _ViewImports.cshtml ve _ViewStart.cshtml DOSYALARINI KOPYALAYIP ADMINPANEL İÇİNDEKİ VIEWS KLASÖRÜNE EKLE. ALT KLASÖRLERİNDE OLMAYACAK.

-----

4. Yukarıdaki  Index.cshtml üzerinde sağ tık scaffold controller oluşturduk. Model Category ve CategoriesController isminde.
Kendisi koydu ilk attribute ü.

    [Area("AdminPanel")]
    public class CategoriesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CategoriesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: AdminPanel/Categories
        public async Task<IActionResult> Index()
        {
              return _context.Categories != null ? 
                          View(await _context.Categories.ToListAsync()) :
                          Problem("Entity set 'ApplicationDbContext.Categories'  is null.");
        }

        // GET: AdminPanel/Categories/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories
                .FirstOrDefaultAsync(m => m.CategoryID == id);
            if (category == null)
            {
                return NotFound();
            }

            return View(category);
        }

        // GET: AdminPanel/Categories/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: AdminPanel/Categories/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CategoryID,CategoryName")] Category category)
        {
            if (ModelState.IsValid)
            {
                _context.Add(category);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(category);
        }

        // GET: AdminPanel/Categories/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }
            return View(category);
        }

        // POST: AdminPanel/Categories/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("CategoryID,CategoryName")] Category category)
        {
            if (id != category.CategoryID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(category);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CategoryExists(category.CategoryID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(category);
        }

        // GET: AdminPanel/Categories/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories
                .FirstOrDefaultAsync(m => m.CategoryID == id);
            if (category == null)
            {
                return NotFound();
            }

            return View(category);
        }

        // POST: AdminPanel/Categories/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Categories == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Categories'  is null.");
            }
            var category = await _context.Categories.FindAsync(id);
            if (category != null)
            {
                _context.Categories.Remove(category);
            }
            
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool CategoryExists(int id)
        {
          return (_context.Categories?.Any(e => e.CategoryID == id)).GetValueOrDefault();
        }
    }

-----










