
Kitap Projesi
-------------
*** MVC Core 6
*** EF Core
*** 1-1, 1-M , M-M ilişkiler 
*** Identity ile uyelik Sistemi - Roller
*** Fluent API kullanımı
*** Custom Validations
*** Area Kullanımı


Book(BookID, BookName, Price, ReleaseDate, CoverImage,CategoryID)
Author (AuthorID,AuthorName, AuthorLastName)
BookAuthor(BAID, BookID,AuthorID)
AuthorDetail(AuthorDetailID,BirthDate, Region, Biography)
Category(CategoryID, CategoryName)

Islem Basamaklari
*** Identity sistemini olustur...
*** BookDB Tasarla...
*** Modlleri olustur...
*** Context sınıfndak propertyleri belirle...
*** Navigation Property'leri olustur...

-----------------

Kapsamı;
- Identity kullanımı
- Bire çok, bire bir, çoka çok kullanımı
- uzantısı sadece jpg olan örneğin yükleme
- custom validation yazımı
- ForeignKey annotaion kullanım zorunluluğu nerede, ne için?


Microsoft Identity seçeneği farklı. Araştır.

Yapay zeka çeşitleri;
Supervise sistemler (gpt vs. milyonlarca yazılımcı gpt vb sorarak sistemi geliştiriyor sonrasında öğrenince proramcıya gerek kalmayacak) ve unsupervise sistemler

------------------

Uygulama;

1. Create New Project - ASP.NET Core Web App(MVC) - Next - MVC_BookApp - Next - Authotantication Type : Individual Accounts ve HTTPS kliğini kaldır - Create

----------------------------------------

2. Area, Identity gibi klasörleri yeni eklemiş.
Data klasörü altında Migration ve Context i kendisi oluşturmuş ama dikkat DbContextten gelmiyor IdentityDbContext ten geliyor. IdentityDbContext de DbContextten geliyor. Go to definition bkz. Arada bir sürü generic sınıf var.
Package altında eklentileri kurmuş.
Migration klasörü içindeki classta Up ve Down var. Down içindekiler özet. AspNetRoles tablosu vs. 7 tane yeni tablo oluşturuyor üyelik sistemiyle alakalı ve çoğunu çoka çok ilişkiyle tutuyor. 
Appsettings.json dosyasında connection stringsi de yazmış. Kendimize uyarlayacağız sadece. Connection strings yazılışının birçok yazım şekli var. 
Burada özel kullanım; (localdb) kavramı; sql servere ihtiyaç duymadan da çalışılabiliyor ama çoklu bağlantılarda yavaş. 2010 gibi geldi.
localdb vs kapatıldığında uçmuyor. users içinde mdf ve log dosyası.
localdb ye msms olmadan vs içinden tools - connect to database - change - sql server database file seçilecek - Ok - path 
2-3 yıl önce yeni gelen özellikle artık memory de sql server gibi kullanma özelliği gelmiş ama aç kapa gitti. memory sql diye geçiyor.
SQL de bir değişiklik yaptın diyelim migration da bu yoksa sıkıntı. Migration üzerinden gitmek en doğrusu.

----------------------------------------

3. Migration ve identity tablolarının oluşturulması
nuget console
update-database
sql içndeki dabase içinde 7 tablo oluştu.

----------------------------------------

4. Modellerin oluşturulması
Tablolar ve alanlar belirlendi. İLŞKİNİN ADINI DOĞRU KOYMAK GEREKİYOR. YOKSA GÖMLEĞİN DÜĞMELERİ YANLIŞ İLİKLENMESİ GİBİ. 
Tablolar arası ilişkiler belirlendi. Kullanıcının detayı görmesi gerekli değilse join maliyeti oluşmamalı.
DİREKT KODLAYARAK BAŞMALAMK YANLIŞ. VERİTABANI TASARIMI ÖNCE KAĞIT ÜZERİNDE TASARLANIR VE ONAYLANIR SONRA KODLANMAYA BAŞLANIR.


    public class Author
    {
        public int AuthorID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }

        [NotMapped]
        public string FullName { get => FirstName + " " + LastName; }

        public AuthorDetail? AuthorDetail { get; set; }
        public ICollection<BookAuthor>? AuthorBooks { get; set; }
    }



    public class AuthorDetail                      //BAŞKA BİR PROP FK OLMASINI İSTESEYDİK ONUN ÖNÜNE YAZACAKTIK.
    {
        [ForeignKey("Author")]                    //DİKKAT!!! HEM PK HEM FK       BİREBİR İLİŞKİDE BİR TARAF MUTLAKA FK OLMALI. PK OLDUĞUNDAN FK EKLEDİK.      VERİLEN İSMİN ÖNEMİ YOK.
        public int AuthorDetailID { get; set; }      //SQL DEN KEYS İÇİNDEN KONTROL ETTİK. HEM PK HEM FK OLARAK GÖRÜNÜYOR.
        public DateTime  BirthDate { get; set; }
        public string Region { get; set; }
        public string Biography { get; set; }


        public Author? Author { get; set; }
    }



    public class Book
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public DateTime ReleaseDate { get; set; }
        public string CoverImagePath { get; set; }
        
        [NotMapped]
        public IFormFile CoverImage { get; set;}
        public decimal Price { get; set; }

        public int CategoryID { get; set; }


        public Category? Category { get; set; }
        public ICollection<BookAuthor>? BookAuthors  { get; set; }
    }




    public class BookAuthor
    {
        [Key]                                            //BAID Yİ EF ANLAMAYACAĞI İÇİN PK OLARAK TANIMLADIK
        public int BAID { get; set; }
        public int BookID { get; set; }
        public int AuthorID { get; set; }

        public Book? Book { get; set; }
        public Author? Author { get; set; }
    }




    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }

        public ICollection<Book>? Books { get; set; }
    }

------------------------------------------------------------------------

5. Context sınıfındaki propertyleri belirledik.
Aşağıda DbSet propertyleri ekledik. Üsttekiler otomatik gelmişti.

    public class ApplicationDbContext : IdentityDbContext<AppUser>            //DIKKAT!!! <AppUser>  ekledik. standardın dışına çıkıldığı için.
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public DbSet<Book> Books { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Author> Authors { get; set; }
        public DbSet<BookAuthor> BooksAuthors { get; set; }            //ÇOKA ÇOK İLİŞKİ TABLOSUNUN İSMİNE DİKKAT
        public DbSet<AuthorDetail> AuthorDetails { get; set; }

        public DbSet<AppUser> Users { get; set; } 
    }

--------------------------------------------------------------------------

6. DB de AspNetUsers tablosunun özelliklerine baktık ve Id nin tipinin string nvarchar(450) ve PK olduğunu gördük. Oraya GUID oluşturuyor amagenellikle biz onu int çevirmek isteriz. 
Kolay kullanılacaksa birşey yapılmasına gerek yok ama burada bir customization yapacaksak birşeyleri değiştirmemiz gerekecek.
Zahidin verdiği örneğe göre adamın querystringden oynayabilmesini engellemek gerekir. Url rewriting konusu var ARAŞTIR.
Bu tablo aynı zamanda indexleneceği için ve aynı zamanda PK da olacağı için int değerlerde yani tam sayı değerlerde arama hızı çok yüksek, string ifadelerde daha yavaş.
MS in string verme sebeplerinde biri de bize özelleştirme imkanı sağlıyor. Int verseydi stringe dönüştürmek daha zor olurdu. String herşeyi alabildiğinden.

Çalıştırdığımızda sağ tarafta Register ve Login butonları çıktı. Burada standart validasyon işlemlerinin özellikleri bulunduruyor.
E-mail göndereblmek için bir smtp servera ihtiyaç var.
Uygulama üzerinde kullanıcı oluşturduk ve db tabloda oluşan kayıdı kontrol ettik.
DİKKAT!!! username ile e-mail aynı. MS varsayılan böyle kabul etmiş.
Login sayfasının cshtml i gizli (Düz MVC de açık). Gelenler DLL içinden geliyor. Register ve Login ekranlarının görüntüsü yok. Nasıl değiştireceğiz? 3. Örnekte sil baştan biz yazacağız. Çünkü classları var.
Proje üzerinde sağ tık - Add - New Scaffolded Item - Soldaki Identity seç - Identity seç - Add - şimdilik login logut ve register seçtik - context sınıfı seç - Add
IDENTITY - PAGES ALTINDA ACCOUNT KLASÖRÜ OLUŞTU VE CS.HML LERİ GELDİ. BURASI MVC GELMİYOR. RAZOR PAGES OLARAK GEÇİYOR. BURADA CONTROLLER YOK. HER BİRİNİN ALTINDA CS DOSYALARI VAR.
MVC CORE DA SADECE MVC CORE İLE DEĞİL RAZOR PAGE UYGULAMASIYLA DA UYGULAMA GELİŞTİRİLEBİLİYOR. WEB FORM KULLANIMININ BENZERİ.

program.cs içinde Add service to the container altındakileri bir önceki projede biz yazmıştık. Onları da şimdi otomatik yazmış.
Birincisi DbContext ayarı
İkincisi Identity ayarı
Biz özelleştirme yapacağımız için bunları yoruma aldık.

Özelleştirmelerden biri;
AspNetUsers tablosunda ad, soyad ve adres bilgisi yok mesela. Bu tabloda olmayan bir verinin bu tabloda tutulması isteniyorsa;
6.a IdentityUser sınıfından miras alarak yeni bir sınıf oluşturuyoruz ve propertylerini ekliyoruz.

public class AppUser:IdentityUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
    }
6.b Context sınıfına DbSet ekliyoruz.

public DbSet<AppUser> Users { get; set; } 

6.c Program.cs te aşağdaki değişiklikleri yapıyoruz.
Başka birçok değişiklikler de yapabiliyoruz.


// Add services to the container.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseSqlServer(connectionString));
builder.Services.AddDatabaseDeveloperPageExceptionFilter();

//AppUser=> IdentityUser Yerine Kullanılacak...
builder.Services.AddDefaultIdentity<AppUser>(options => { 
    
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequiredLength = 7;
})
    .AddEntityFrameworkStores<ApplicationDbContext>();

//Standart şekilde kullanılacaksa...
//builder.Services.AddDefaultIdentity<IdentityUser>(options => options.SignIn.RequireConfirmedAccount = true)
//    .AddEntityFrameworkStores<ApplicationDbContext>();

builder.Services.AddControllersWithViews();


6.d Views - Shared - _LoginPartial içinde en üstteki inject ler aşağıdaki gibi değiştirildi. <IdentityUser> vardı daha önce.

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager


6.e Migration oluşturuyoruz.


6.f DB içerisinden tabloyu kontrol ediyoruz.


-----------------------------------------------------------------------------------------
09-MVC-Prj-02-2-07.10





1. Area - Identity - Pages - Account - Register.cshtml içine, AppUser modeline eklenen özellikleri buraya ekleyeceğiz. Razor Pages yaklaşımı. MVC paterni veya patern yok. Düz MVC de de var.
Register.cshtml içindeki Input modelleri aşağıdaki şekilde bağlıyoruz; Standardın dışına çıktığımız için bu konuya girdik.
Yazılım geliştirme süreçleri çok maliyetli.
%80 kopya döndüğü için çok farketmiyoruz belki ama.


1.a Register.cshtml.cs içinde InputModel classı içine aşağıdakileri ekledik.
DİKKAT!!! ErrorMessage içini boş brakırsan hata alırsın.

public class InputModel
{
            [Required]
            [Display(Name = "FirstName")]
            public string FirstName { get; set; }

            [Required]
            [Display(Name = "LastName")]
            public string LastName { get; set; }

            [Required]
            //[MinLength(10, ErrorMessage =""),MaxLength(200,ErrorMessage ="")]
            [Display(Name = "Address")]
            public string Address { get; set; }



1.b Register.cshtml içinde form tagi altına aşağıdakileri ekledik.



            <h2>Create a new account.</h2>
            <hr />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            <div class="form-floating">
                <input asp-for="Input.FirstName" class="form-control"  aria-required="true" />
                <label asp-for="Input.FirstName"></label>
                <span asp-validation-for="Input.FirstName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.LastName" class="form-control"  aria-required="true" />
                <label asp-for="Input.LastName"></label>
                <span asp-validation-for="Input.LastName" class="text-danger"></span>
            </div>

            <div class="form-floating">
                <input asp-for="Input.Address" class="form-control" aria-required="true" />
                <label asp-for="Input.Address"></label>
                <span asp-validation-for="Input.Address" class="text-danger"></span>
            </div>


1.c Register.cshtml.cs içinde user. ile başlayan propertyler eklenmeden önce aşağıdaki kontrol yapıldı.
DİKKAT!!!

Program.cs içindeki aşağıda yazılı olan yazı içindeki RequireConfirmedAccount = false; olduğundan emin olduk.
//AppUser=> IdentityUser Yerine Kullanılacak...
builder.Services.AddDefaultIdentity<AppUser>(options => { 
    
    options.SignIn.RequireConfirmedAccount = false;
    options.Password.RequiredLength = 7;
})
    .AddEntityFrameworkStores<ApplicationDbContext>();


Daha sonra; Register.cshtml.cs içinde user. ile başlayan propertyler eklendi.

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = CreateUser(); altına

                user.FirstName = Input.FirstName;
                user.LastName=Input.LastName;
                user.Address = Input.Address;




1.d Register.cshtml.cs içinde yorum satırına alındı. Mail gönderme ile ilgili kod.

                    //var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    //code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    //var callbackUrl = Url.Page(
                    //    "/Account/ConfirmEmail",
                    //    pageHandler: null,
                    //    values: new { area = "Identity", userId = userId, code = code, returnUrl = returnUrl },
                    //    protocol: Request.Scheme);

                    //await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                    //    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

Oturum yapıp yapamayacağımızın testini yaptık. Yeni kullanıcı oluşturduk ve griş yaptık.

-----

2. SQL içinden tablolardaki tipleri kontrol ettik ve değiştirilmesi gerekenleri gördük.

Context sınıfında ilişki ve ilk değer atamalarını yaptık.

protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);

            //Tum entitylerin ozellikleri buradan verilebilinir...


            builder.Entity<Category>().Property(x => x.CategoryName)
                                      .IsRequired()
                                      .HasMaxLength(30)
                                      .HasColumnType("varchar");
            
            //ilk deger atama....
            builder.Entity<Category>().HasData(
                new Category { CategoryID=1, CategoryName="Roman" },
                new Category { CategoryID=2, CategoryName="Hikaye" },
                new Category { CategoryID=3, CategoryName="Deneme" }
                );


            builder.Entity<Book>().Property(x => x.BookName).IsRequired().HasMaxLength(150).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.CoverImagePath).IsRequired().HasMaxLength(30).HasColumnType("varchar");
            builder.Entity<Book>().Property(x => x.ReleaseDate).IsRequired(false).HasColumnType("smalldatetime");
            builder.Entity<Book>().Property(x => x.Price).IsRequired().HasColumnType("money");
            
        }

- Migration oluşturduk.

------

3. Admin için Area oluşturacağız. Çünkü admin sayfası son kullanıcınınkinden farklı olmalı. CRUD veya kontrol paneli gibi.
Identity için kendisi zaten oluşturmuştu. Biz Admin için olşuturacağız.
Projeyi fiziksel ve mantıksal olarak ayırıyor. Area ların kendi mvc leri var.

3.a Solution ağacının en üstünde sağ tık - Add - New Scaffolded Item - Sol taraftan Common seç - ortadan MVC Area seç - Add - isim ver AdminPanel - Add
Çıkan kodu kopyala. Kodu kaybedersen ağaçta altta txt dosyası içinde.

3.b Program.cs içinde app.MapControllerRoute( gerisine yapıştır.
Bu olmadan sayfaya ulaşılamazdı, denedik.


Bu area altından aşağıdaki controlleri oluşturduk.

    [Area("AdminPanel")]    //DİKKAT!!! BUNU YAZMAYI UNUTMA. DÜZ MVC DE BU YOK. DÜZ MVC DE KODUN BAŞINDA SESSION VAR MI YOK MU DİYE KONTROL EDİLİYOR. ORADAN GÖNDERİLİYOR. 
                            //DİKKAT!!! CLASSIN TEPESİNE YAZILACAK.
    public class PanelController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }

Bu controllerin view ini oluşturduk.

<h1>Admin Panel Sayfasi....</h1>

<ul>
    <li><a asp-area="AdminPanel" asp-controller="Categories" asp-action="Index">Kategoriler</a></li>
    <li>Kitaplar</li>
    <li>Yazarlar</li>
</ul>

DİKKAT!!! LAYOUT GELMEDİ. AREA ALTINDAKİ IDENTITY ALTINDAKİ _ViewImports.cshtml ve _ViewStart.cshtml DOSYALARINI KOPYALAYIP ADMINPANEL İÇİNDEKİ VIEWS KLASÖRÜNE EKLE. ALT KLASÖRLERİNDE OLMAYACAK.

-----

4. Yukarıdaki  Index.cshtml üzerinde sağ tık scaffold controller oluşturduk. Model Category ve CategoriesController isminde.
Kendisi koydu ilk attribute ü.

    [Area("AdminPanel")]
    public class CategoriesController : Controller
    {
        private readonly ApplicationDbContext _context;

        public CategoriesController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: AdminPanel/Categories
        public async Task<IActionResult> Index()
        {
              return _context.Categories != null ? 
                          View(await _context.Categories.ToListAsync()) :
                          Problem("Entity set 'ApplicationDbContext.Categories'  is null.");
        }

        // GET: AdminPanel/Categories/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories
                .FirstOrDefaultAsync(m => m.CategoryID == id);
            if (category == null)
            {
                return NotFound();
            }

            return View(category);
        }

        // GET: AdminPanel/Categories/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: AdminPanel/Categories/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CategoryID,CategoryName")] Category category)
        {
            if (ModelState.IsValid)
            {
                _context.Add(category);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(category);
        }

        // GET: AdminPanel/Categories/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories.FindAsync(id);
            if (category == null)
            {
                return NotFound();
            }
            return View(category);
        }

        // POST: AdminPanel/Categories/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("CategoryID,CategoryName")] Category category)
        {
            if (id != category.CategoryID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(category);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CategoryExists(category.CategoryID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(category);
        }

        // GET: AdminPanel/Categories/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.Categories == null)
            {
                return NotFound();
            }

            var category = await _context.Categories
                .FirstOrDefaultAsync(m => m.CategoryID == id);
            if (category == null)
            {
                return NotFound();
            }

            return View(category);
        }

        // POST: AdminPanel/Categories/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Categories == null)
            {
                return Problem("Entity set 'ApplicationDbContext.Categories'  is null.");
            }
            var category = await _context.Categories.FindAsync(id);
            if (category != null)
            {
                _context.Categories.Remove(category);
            }
            
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool CategoryExists(int id)
        {
          return (_context.Categories?.Any(e => e.CategoryID == id)).GetValueOrDefault();
        }
    }

----- scaffold views

------INDEX
@model IEnumerable<MVC_BookApp.Models.Category>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CategoryName)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CategoryName)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.CategoryID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CategoryID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CategoryID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

------ CREATE

@model MVC_BookApp.Models.Category

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Category</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="CategoryName" class="control-label"></label>
                <input asp-for="CategoryName" class="form-control" />
                <span asp-validation-for="CategoryName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

------ EDIT

@model MVC_BookApp.Models.Category

@{
    ViewData["Title"] = "Edit";
}

<h1>Edit</h1>

<h4>Category</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="CategoryID" />
            <div class="form-group">
                <label asp-for="CategoryName" class="control-label"></label>
                <input asp-for="CategoryName" class="form-control" />
                <span asp-validation-for="CategoryName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

------ DETAILS

@model MVC_BookApp.Models.Category

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Category</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CategoryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CategoryName)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.CategoryID">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

-------- DELETE

@model MVC_BookApp.Models.Category

@{
    ViewData["Title"] = "Delete";
}

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Category</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CategoryName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CategoryName)
        </dd>
    </dl>
    
    <form asp-action="Delete">
        <input type="hidden" asp-for="CategoryID" />
        <input type="submit" value="Delete" class="btn btn-danger" /> |
        <a asp-action="Index">Back to List</a>
    </form>
</div>


-----------------------------------------------------------------------------------------
10-MVC-Prj-02-3-08.10



Controller içerisindeki Token nedir?
[ValidateAntiForgeryToken]
web uygulamalarında sizin formunu dışında başka ortamlardan veri gelmesi sağlanabiliyor.
Bu onu bozuyor.
Arkada bir token oluşturuyor ve bunu ön yüze gönderiyor.
Daha sonra serverla bu token aynı olduğu için, yani başka bir yerden geldiğinde bu token bilgisi olmayacağı için işlemin yapılmasını engeller.
Bu konu ayrıca anlatılacak daha sonra web servisleri anlatırken. 
JWT Json Web Token teknolojisi. Servislerin güvenliği konusunda çok kullanılıyor. Zamana bağlı mesela 10 dk da bir tokeni değiştir diyebiliyor. Adam onu buluncaya kadar token değişiyor zaten.
jwt.io kendi resmi sitesinden baktık. Bunun ilginç bir kullanımı var. Üç parçadan oluşuyor. Sitede renklendirilmiş.
Token 50 yıllık teknoloji. WCF i anlatırken de token teknolojisini kullanıyorduk. 
Token bir madalyonun iki parçası gibi.
Client geldiğinde tokenlar aynıysa bu iki kişi birbirini tanıyor.
Sunucu oluşturuyor. Bir kopyası bende bir kopyası clientta.
Tokenlar hashlenmiş tutuluyor. 

Sessiondaki 20 dk hareketsiz kalırsa atma olayı farklı. 
Core da session kullanımı çok farklı. Düz mantıkla kullanamıyorsunuz.
Core öncesi sessionları istediğiniz gibi kullanabiliyordunuz. Core ile birlikte ilgili ayarları yapmadan  session ları kullanamıyorsunuz.
Session kullanıcı adı ve şifre ile sisteme giriş yaptınız diyelim. Giriş yaptıktan sonra sistem arka planda bir session oluşturuyor. 
Bu sessionları (herhangi bir ayarlama yapılmazsa standart ayarı 20 dk.) mekanizma siz pc den uzaklaştıktan sonra klavye ve fare eventleri kesildikten sonra 
session öldürülür ve login ekranına atıyor.
(core önce 1 dk nın altına düşemiyordunuz) (core da sn veya msn cinsinden session oluşturulabiliyor.)
Mantık token gibi. İki tarafta da session id bilgisi oluşturuluyor. İkisi aynı değilse bir taraf düştüğü için null olduğu için oturum kapatılıyor.

Hoca 1 lira bırakıp gitmenin dışında o sayfaya tıklanıp tıklanmadığının kontrol ediyormu araştıracak.

MS Identity konusunda profesyonel çözüm çıkarmış. Sıfırdan yazılabilir ama riskleri var. 

-------------------------------------------
MODELLER REVİZE SONRASI SON DURUM;

VİEWMODELS KLASÖRÜ İÇİNDE;
public class AuthorVM
    {
        public Author Author { get; set; }
        public AuthorDetail? AuthorDetail { get; set; }
    }

public class AppUser:IdentityUser
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
    }

public class Author
    {
        public int AuthorID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }

        [NotMapped]
        public string FullName { get => FirstName + " " + LastName; }

        public AuthorDetail? AuthorDetail { get; set; }
        public ICollection<BookAuthor>? AuthorBooks { get; set; }
    }

public class AuthorDetail
    {
        [ForeignKey("Author")]
        public int AuthorDetailID { get; set; }

        [DisplayFormat(DataFormatString ="{0:d}")]
        public DateTime?  BirthDate { get; set; }
        public string? Region { get; set; }
        public string? Biography { get; set; }


        public Author? Author { get; set; }
    }

public class Book
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public DateTime? ReleaseDate { get; set; }
        public string CoverImagePath { get; set; }
        
        [NotMapped]
        public IFormFile CoverImage { get; set;}
        public decimal Price { get; set; }

        public int CategoryID { get; set; }


        public Category? Category { get; set; }
        public ICollection<BookAuthor>? BookAuthors  { get; set; }
    }

public class BookAuthor
    {
        [Key]
        public int BAID { get; set; }
        public int BookID { get; set; }
        public int AuthorID { get; set; }

        public Book? Book { get; set; }
        public Author? Author { get; set; }
    }

public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }

        public ICollection<Book>? Books { get; set; }
    }


-------------------------------------------


1. Area - AdminPanel - Panel 

Index.cshtml bir önceki gündeki eski. Aşağıdaki sekilde revize.

<h1>Admin Panel Sayfasi....</h1>

<ul>
    <li><a asp-area="AdminPanel" asp-controller="Categories" asp-action="Index">Kategoriler</a></li>
    <li><a asp-area="AdminPanel" asp-controller="Authors" asp-action="Index">Yazarlar</a></li>
    <li><a asp-area="AdminPanel" asp-controller="Books" asp-action="Index">Kitaplar</a></li>
</ul>

PK FK ilişkisi gereği eğer kitap tablosuyla yazar tablosunu ilişkilendireceksem önce yazar tablosunu halletmeliyiz.

------

2. Author ve AuthorDetail tabloları birleştirilerek tek ekranda veri girilişi


2.a İki tabloyu view e taşımak için; Models klasörü altında ViewModels klasörü açarak onun altına AuthorVM classı ekliyoruz.

 public class AuthorVM
    {
        public Author Author { get; set; }
        public AuthorDetail? AuthorDetail { get; set; }
    }


2.b AuthorsController ı oluşturduk.

    [Area("AdminPanel")]
    public class AuthorsController : Controller
    {
        private readonly ApplicationDbContext _context;

        public AuthorsController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {

            return View(_context.Authors.Include("AuthorDetail").ToList());
        }

        public IActionResult Create()
        {
            return View();
        }


        //UNIT OF WORK OLMADAN İKİ DEFA SAVE İLE. DİKKAT MAHSURU VAR.
        //[HttpPost]
        //public IActionResult Create(AuthorVM authorVM)
        //{    
            //if (ModelState.IsValid)
            //{              
               //İki SaveChanges() ile; FAKAT BURADA ŞÖYLE BİR SIKINTI VAR; MESELA O ANDA BENİM YAZARID 7 OLDU AMA O YAZARDETAYID Yİ BENDEN ÖNCE BAŞKASI ALMIŞ OLABİLİR.
               //_context.Authors.Add(authorVM.Author);
               //_context.SaveChanges();        //EF ekleme, düzenleme ve silme olarak kendisi SQL cümlelerini oluşturuyor arkaplanda. O yüzden tek SaveChanges() hallediyor.

               //if (authorVM.AuthorDetail != null)
               //{
                  //authorVM.AuthorDetail.AuthorDetailID = authorVM.Author.AuthorID;
                  //_context.AuthorDetails.Add(authorVM.AuthorDetail);
                  //_context.SaveChanges(); 
                  //return RedirectToAction("Index");
               //}
            //}
            //return View();
        //}


        //Unit Of Work Pattern UoW  - DAHA SADE - 
        BURADAKİ DEVRİM; KONSOLA BAKTIK.
        INSERT INTO AUTHORS (FIRSTNAME, LASTNAME) VALUES (@P0, @P1);
        SELECT AUTHORID FROM AUTHORS WHERE @@ ROWCOUNT = 1 AND AUTHORID = SCOPE_IDENTITY();       //DİKKAT!!! SCOPE_IDENTITY()
        INSERT INTO AUTHORDETAILS (AUTHORDETAILID, BIOGRAPHY, BIRTHDATE, REGION) VALUES (@P2, @P3, @P4, @P5);
        

        //SCOPE IDENTITY NEDİR?     https://ahmetrende.com/2010/11/23/sql-serverda-son-kaydin-id-degerini-almak-scope_identity/
        Genellikle uygulamalarımızda veritabanı ile bağlantı kurarız. Veriler çeker ya da yeni kayıtlar gireriz.
        Bazen bir tabloya eklediğimiz kaydın ID değerine o an ihtiyaç duyabiliriz.
        
        Bunu türlü yollarla yapabiliriz tabikide. Mesela kayıt işleminden sonra bir select sorgusu yazıp ID Kolonuna göre ters sıralayıp en üstteki satırın ID bilgisini çekebiliriz.
        Ne kadar da zahmetli 🙂
        Bu hem uzun ve yorucu hem de 2 farklı transaction çalıştıran bir işlem.
        
        Bunun yerine SCOPE_IDENTITY() kullanımına bakalım.
        
        
        Yandaki gibi “Urunler” tablomuz olsun. “UrunID” identity bir kolon. “UrunAdi” ise nvarchar tipinde bir kolon.
        
        Şimdi “USB Bellek” adında farklı bir kayıt ekleyelim. Sorgumuz eklenen kaydın ID değerini geri döndürecek. Bizim tablomuza göre “4” değerini vermeli.
        
        1
        2
        insert into Urunler Values ('USB Bellek')
        SELECT SCOPE_IDENTITY()
        
        Sorgumuzu çalıştırdığımızda şöyle bir çıktı alıyor olmamız gerek;
        
        Tabi ben sadece management üzerinde çalıştırdım bu sorguyu. Uygulama sırasında direk bu değeri çekebilirsiniz.
        Ya da sorgunuzda birden fazla tabloya bu ID ile kayıt girmeniz gerekiyorsa, sorgu içerisinde bir değişkene bu değer atanabilir. Şöyleki;
        1
        2
        3
        insert into Urunler Values ('USB Bellek2')
        declare @id int
        set @id =  SCOPE_IDENTITY()
        Artık “@id” değişkenini istediğiniz tabloya kayıt olarak girebilirsiniz.
        Son olarak;
        LinQ ya da entity framework gibi data modellerinde kullanmak için yazacağınız store procedure sonuna yani insert sorgusundan sonra “select” yerine “return” yazın.
        Böylece data modelindeki metot direk olarak int değerinde ki id değerini döndürecektir. 
        1
        return SCOPE_IDENTITY()



        //Tek SaveChanges() metodu ile PK ve FK kullanımı...
        [HttpPost]
        public IActionResult Create(AuthorVM authorVM)
        {
            byte state = 0;
                 
            if (ModelState.IsValid)
            {              
                _context.Authors.Add(authorVM.Author);

                state = 1;

                if (authorVM.AuthorDetail.BirthDate !=null || authorVM.AuthorDetail.Region != null || authorVM.AuthorDetail.Biography != null)
                {
                    authorVM.AuthorDetail.Author = authorVM.Author;        //NAVIGATION PROPERTY KULLANIM YERLERİNDEN BİRİ.
                    _context.AuthorDetails.Add(authorVM.AuthorDetail);

                   state = 2;               
                }
                _context.SaveChanges();    
            }

            if(state >1)
              return RedirectToAction("Index");
            else
              return View();
        }



        public IActionResult Test()            // DELEGE FATALITY İÇİN KULLANILAN METOD
        {
            //int count = FindCategories().Count(); 
            //
            //
            //int count = FindAuthors("a").Count();
            //

            //int count = Finds<Category>(x=>x.CategoryID %2==1).Count();
            string word = "a";
            int count = Finds<Author>(x=>x.FirstName.ToLower().Contains(word)).Count();

            List<Author> liste = Finds<Author>(x => x.FirstName.ToLower().Contains(word));

            string sonuc = "";
            foreach(Author a in liste)
            {
                sonuc += a.FirstName;
            }
            return Content("Sonuc=" + count.ToString()  + " " + sonuc);
        }



        DELEGE FATALITY

        //KategoriID si  tek olan  kategorileri getir?
        //Yazarın adında a harfi olanları getir?
        public List<Category> FindCategories()
        {

            //return _context.Categories.Find(id);
            return _context.Categories.Where(x=>x.CategoryID % 2==1).ToList();
        }

        public List<Author> FindAuthors(string word)
        {

            //return _context.Categories.Find(id);
            return _context.Authors.Where(x => x.FirstName.Contains(word)).ToList();
        }

        public List<TEntity> Finds<TEntity>(Func<TEntity,bool> where) where TEntity : class 
        {
            DbSet<TEntity> set = _context.Set<TEntity>();

            return _context.Set<TEntity>().Where(where).ToList();
        }
    }



2.c AuthorController ın Create.cshtml ini oluşturduk.

@using MVC_BookApp.Models.ViewModels;
@model AuthorVM

<form method="post" asp-area="AdminPanel" asp-controller="Authors" asp-action="Create">
    <table class="table table-striped">
        <tr>
            <td><label asp-for="Author.FirstName"></label></td>
            <td><input type="text" asp-for="Author.FirstName" class="form-control" required></input></td>
        </tr>
        <tr>
            <td><label asp-for="Author.LastName"></label></td>
            <td><input type="text" asp-for="Author.LastName" class="form-control" required></input></td>
        </tr>
        <tr>
            <td><label asp-for="AuthorDetail.BirthDate"></label></td>
            <td><input type="date" asp-for="AuthorDetail.BirthDate" class="form-control"></input></td>
        </tr>
         <tr>
            <td><label asp-for="AuthorDetail.Region"></label></td>
            <td><input type="text" asp-for="AuthorDetail.Region" class="form-control"></input></td>
        </tr>
        <tr>
            <td><label asp-for="AuthorDetail.Biography"></label></td>
            <td><textarea asp-for="AuthorDetail.Biography" class="form-control" cols="60" rows="5"></textarea></td>
        </tr>
        <tr>
            <td colspan="2"><input type="submit" value="Save Author Data" class="btn btn-primary"/></td>
            
        </tr>
    </table>
    <div asp-validation-summary="All"></div>
</form>



2.d AuthorController ın Index.cshtml ini oluşturduk.

@model IEnumerable<Author>

<table class="table table-striped">
    @foreach(var author in Model)
    {
    <tr>
        <td>@author.FirstName</td>
        <td>@author.LastName</td>
        @*<td>@author.AuthorDetail.BirthDate.Value.ToShortDateString()</td>*@

        <td>
            @if(author.AuthorDetail !=null)                    //DİKKAT!!! LEFT JOIN YAPILDI AMA BİZ NULL KONTROLÜ KOYMADIĞIMIZDAN GÖREMEMİŞTİK. 
            {
            @author.AuthorDetail.BirthDate.Value.ToString("dd/MM/yyyy")        // küçük mm yazılması MM ile aynı değil
            }
        </td>
       
    </tr>
    }
</table>



-----------------------------------------------------------------------------------------
11-MVC-Prj-02-4-14_15.10



ÇOKA ÇOK İLİŞKİ 


1. VM Oluşturulması

public class BookVM
    {
        public Book Book { get; set; }
        public SelectList Categories  { get; set; }
        public SelectList Authors  { get; set; }

        public string GetIDs { get; set; }
        //public ICollection<int> AuthorID { get; set; }
    }




2. Areas - AdminPanel - Controllers - BookController

    [Area("AdminPanel")]
    [Authorize]            //    ARTIK OTURUM AÇILDIĞINDA BURAYA GİRİŞ YAPILABİLİR. DİKKAT AREAS - ADMINPANEL ALTINDAKİ TÜM CONTROLLERLARA EKLE.
    public class BookController : Controller
    {
        private readonly ApplicationDbContext _context;

        public BookController(ApplicationDbContext context)
        {
            _context = context;
        }

        public IActionResult Index()
        {
            return View(_context.Books.Include("Category").ToList());
        }

        public IActionResult Create()
        {
            BookVM bookVM = new BookVM();

            bookVM.Categories = new SelectList(_context.Categories, "CategoryID", "CategoryName");
            bookVM.Authors = new SelectList(_context.Authors, "AuthorID", "FullName");
            //bookVM.AuthorID = new List<int>();
            return View(bookVM);
        }


        // DİKKAT !!! HANGİ VERİLERİN GELİP GELMEDİĞİNE BU ŞEKİLDE KONTROL ETTİ.
        //[HttpPost]
        //public IActionResult Create(IFormCollection frm)
        //{
            //string str = "";

            //foreach (var s in frm)
                //str += s.Key + "=>" + s.Value + " ";

            //return Content("authorName" + str)            //DİKKAT!!! SCRİPT TAGİ İÇİNDE GEÇİYOR authorName
        //}


        [HttpPost]
        public IActionResult Create(Book book, string getIds)
        {
            string[] authorIDs = getIds.Split(' ');
            //Console.WriteLine(authorIDs.Length);
            List<BookAuthor> authors = new List<BookAuthor>();
            for (int i= 0;i < authorIDs.Length - 1;i++)            //ENSONDAKİ BOŞLUKTAN KURTULMAK İÇİN
            {
                authors.Add(new BookAuthor { AuthorID = int.Parse(authorIDs[i]), Book = book });  //AUTHORID LER HIDDEN DAN GELİYOR. DİKKAT! Book = book BOOK TABLOSUNA BİRŞEY YAZMADIM. UOW
            }

            book.BookAuthors = authors;    // YUKARIDAKİ LİST İ NAV PROP ATTIK.

            _context.Books.Add(book);
            _context.BooksAuthors.AddRange(authors);    // BİRDEN FAZLA OLDUĞUNDAN
            _context.SaveChanges();        //UOW

            return RedirectToAction("Index");
        }
    }



3. BookController ın Index.cshtml

@model IEnumerable<Book>

    <a asp-area="AdminPanel" asp-controller="Book" asp-action="Create">Add a Book</a>
    <br />
<table>
@foreach(Book book in Model)
{
    <tr>
        <td>@book.BookName</td>
        <td>@book.Category.CategoryName</td>
        <td>@book.Price</td>
    </tr>
}
</table>




4. BookController ın Create.cshtml

@using MVC_BookApp.Models.ViewModels;
@model BookVM


// BURADA DAHA BASİT BİR ÇÖZÜM Kİ ŞÖYLE; HER BİR SEÇİLEN İÇİN SUNUCUYA GİDİP SORDURABİLİRDİK. AMA BU ŞEKİLDE SUNUCUYA TEK SEFERDE GİTTİK. HER SEÇİLENİN KİM OLDUĞUNU SORMAK İÇİN GİTMEDİK.
<script>
    function selectAuthor(data)
    {
        //Secilen ad....
        let text = data.options[data.selectedIndex].text;
        //let frm = document.getElementById("frmBook");
        let authors = document.getElementById("authorsDiv");
        let hidden = document.getElementById("Ids");

        let input = document.createElement("input");
        //let label =document.createElement("label");
        input.type="text";                                            //SEÇİLDİKÇE EKLENEN TEXTBOX
        input.value= text;
        input.readOnly=true;
        input.name = data.value;
        
        input.addEventListener("click",(e)=>{ 
            let id=e.target.name;
            let authors = document.getElementById("authorsDiv");
            let hidden = document.getElementById("Ids");
          
            hidden.value = hidden.value.replace(id+" ", "");    //BOŞLUKTAN DOLAYI ÇIKMIYORDU.
            authors.removeChild(e.target);
        });
     

        hidden.value += data.value + " ";
      
        authors.appendChild(input);                
        // FORMUN İÇİNE EKLE DEMEK. NESNEYİ OLUŞTURMAK EKRANDA GÖRÜNMESİ İÇİN YETERLİ DEĞİL. 
        // O KOLEKSİYONA EKLENMESİ GEREK. WİNDOWS FORMDAKİ THİSLE EKLEME GİBİ.
        // DİĞER TÜRLÜ RAMDE VARDIR AMA EKRAN GÖRÜNTÜSÜ YOKTUR.
  
    }

   
</script>

<form method="post" enctype="multipart/form-data" asp-area="AdminPanel" asp-controller="Book" asp-action="Create" id="frmBook">
<table class="table table-striped">
    <tr>
        <td><label asp-for="Book.BookName"></label></td>
        <td><input type="text" asp-for=Book.BookName class="form-control" /></td>
    </tr>
        <tr>
            <td><label asp-for="Book.ReleaseDate"></label></td>
            <td><input type="date" asp-for=Book.ReleaseDate class="form-control" /></td>
        </tr>
        <tr>
            <td><label asp-for="Book.Category"></label></td>
            <td><select  asp-for=Book.CategoryID asp-items=Model.Categories class="form-control"></select></td>
        </tr>
        <tr>
            <td><label asp-for="Book.Price"></label></td>
            <td><input type="text" data-type="currency" asp-for=Book.Price class="form-control" /></td>
        </tr>

        <tr>
            <td><label asp-for="Book.CoverImage"></label></td>
            <td><input type="file"  asp-for=Book.CoverImage class="form-control" />
                <input type="hidden" asp-for=Book.CoverImagePath class="form-control" value="empty.jpg" />
            </td>
        </tr>
        <tr>
            @*<td><label asp-for=""></label></td>*@
            <td>Authors</td>
            <td>
                <select asp-items=Model.Authors class="form-control" onchange="selectAuthor(this)">
                    <option value="" disabled selected hidden>Seciniz... </option >
                </select>
                <input type="hidden" id="Ids" value="" name="GetIDs"/>
                <ul id="authorsDiv" >

                </ul>
            </td>
        </tr>

        <tr>
            <td colspan="2">
                <input type="submit" value="Add Book" />
            </td>
        </tr>
</table>
</form>



               


