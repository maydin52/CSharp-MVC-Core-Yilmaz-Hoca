MVC Core Projesi
  
Teknolojiler
   Web API
   Identity
   Draw Charts


Users
Roles
Customers


1. VS aç - Create a new project - ASP.Net Core Web App (MVC) - WebApp_API adını verdik - Next - 6.0, auth none, configure kliksiz, enable kliksiz, do not kliksiz - Create

DİKKAT!!! auth altındaki Microsoft Identity Platform daha çok facebook, twitter girişi gibi mantıkta çalışıyor. 
Mehmet tüm actionları tek controlllera yazsak sordu?
https://www.google.com/search?q=separation+of+concerns+nedir&sca_esv=585565771&rlz=1C5CHFA_enTR1036TR1036&sxsrf=AM9HkKkmIvO_ciu7fGo7d3TT-ljQpH05AA%3A1701082243119&ei=g3RkZcT4BtXmxc8P66OKuAM&ved=0ahUKEwiExtaWgeSCAxVVc_EDHeuRAjcQ4dUDCBA&uact=5&oq=separation+of+concerns+nedir&gs_lp=Egxnd3Mtd2l6LXNlcnAiHHNlcGFyYXRpb24gb2YgY29uY2VybnMgbmVkaXIyCBAAGIAEGMsBMgsQABiABBiKBRiGAzILEAAYgAQYigUYhgMyCxAAGIAEGIoFGIYDMgsQABiABBiKBRiGAzILEAAYgAQYigUYhgNIhgxQpgVY5QpwAXgBkAEAmAGpAaAB0QWqAQMwLjW4AQPIAQD4AQHCAgoQABhHGNYEGLADwgINEAAYgAQYigUYsAMYQ8ICBRAAGIAEwgIGEAAYFhgewgIIEAAYFhgeGA_iAwQYACBBiAYBkAYK&sclient=gws-wiz-serp
SoC (Separation Of Concerns) Prensibi ne göre ayrı olmalı.
Sen yazıp gittikten sonra kodu incleyen kişi nasıl anlayacak? Evdeki giysi dolabına herşeyi doldurmak gibi. Birşeye ihtiyaç olduğunda bulmanın zorluğu.
Bunun bir üst seviyesi SOLID

+ borç verdi, - borç aldı mantığında.





2. Tools - Nuget Package Manager - ... for solution - browse içinden aşağıdakileri kütüphaneleri kuruyoruz. (her birinde proje seçilecek, versiyonları aynı seçilecek 6.25)
- Microsoft.EntityFrameworkCore
- Microsoft.EntityFrameworkCore.SqlServer
- Microsoft.EntityFrameworkCore.Tools
- Microsoft.AspNetCore.Identity.EntityFrameworkCore
- Microsoft.AspNetCore.Identity.UI - bunu kurarsan hazır ekranları da kullanabilirsin ama kurmadık. Biz kendimiz yazdık.?????


Identity sistemi kullanacağız ama db bağlantısını EF kullanmadan mümkün mü? Hayır. Ya da komple senin yazman gerekiyor. 





3. Models Klasörü altına aşağıdaki modelleri ekledik.

//DİKKAT!!! Ara tablonun çoka çok ilişki nav prop eklemedik aşağıya. SıgnInManager, UserManager oradan çekiyor. 
public class AppRole:IdentityRole<int>
    {
    }

public class AppUser:IdentityUser<int>    //Identity kullandığımızda varsayılanı IdentityUser. Biz ID lerde int kullanacağımız için bu şekilde yazdık. Yazmasaydık Guid string ifade olarak baz alacaktı. String ifadeler yavaş çalışır.
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public string ProfileImagePath { get; set; }

        public ICollection<Customer>? Customers { get; set; }
    }

public class Customer
    {
        public int CustomerID { get; set; }
        public string Name { get; set; }
        public string Surname { get; set; }
        public decimal TotalBalance { get; set; }

        //Kim olusturdu...
        public int AppUserID { get; set; }
        public AppUser? AppUser { get; set; }

        [NotMapped]
        public string UserName { get => Name + " " + Surname; }

        public ICollection<MoneyMovement>? MoneyMovements { get; set; }
    }

public class MoneyMovement
    {
        public int ID { get; set; }

        public int CustomerID { get; set; }
        public DateTime CreateDate { get; set; }

        public string Description { get; set; }
        public decimal Amount { get; set; }

        public Customer? Customer { get; set; }
    }





4. Models klasörü içerisine Configurations klasörü açtık ve aşağıdakileri oluşturduk.
SoC (Separation Of Concerns) Prensibi
Ön yüzde de kısıtlayabilirdik fakat db de nvarcharmax kalıyor, kalmamalı. Ayrıca db de kısıt olmazsa ön yüzü geçince dbye de geçer. Kademeli defans.
Her yerde ön yüzde yok, api de ne olacak? Sıkıntı. İki taraftan da kısıtlanmalı.

public class AppRole_CFG : IEntityTypeConfiguration<AppRole>
    {
        public void Configure(EntityTypeBuilder<AppRole> builder)
        {
            //Initial Value

            builder.HasData(new AppRole { Id=1, Name="Admin", NormalizedName="ADMIN", ConcurrencyStamp=Guid.NewGuid().ToString() } );
            builder.HasData(new AppRole { Id=2, Name="User", NormalizedName="USER", ConcurrencyStamp=Guid.NewGuid().ToString() } );
        }
    }


public class AppUser_CFG : IEntityTypeConfiguration<AppUser>
    {
        public void Configure(EntityTypeBuilder<AppUser> builder)
        {
            builder.Property(x => x.Name).IsRequired().HasMaxLength(25);
            builder.Property(x => x.Surname).IsRequired().HasMaxLength(25);
            builder.Property(x => x.ProfileImagePath).IsRequired(false).HasMaxLength(100);

            //superuser olustur...
            AppUser user = new AppUser() {
                Id = 1,
                Name = "Cevdet",
             Surname = "Korkmaz",
                UserName = "Cevdo", NormalizedUserName = "CEVDO",
                Email = "cevdet@deneme.com", NormalizedEmail = "CEVDET@DENEME.COM",
                SecurityStamp = Guid.NewGuid().ToString(),
                ConcurrencyStamp = Guid.NewGuid().ToString(),
                EmailConfirmed = false,                          //DİKKAT!!! VEYA PROGRAM.CS TE YAZIYORUZ. BKZ AŞAĞIDAKİ PROGRAM.CS. HATA ALIRSAN BUNLARDAN BAŞKA DB DEN ELLE DE FALSE YAPILABİLİR
                PhoneNumberConfirmed = false,
                ProfileImagePath = "empty.jpg"
            };

            //DİKKAT!!!Bunu yazdıktan sonra silmekte ve daha korunaklı bir yere yazıp orada tutmakta fayda var.
            PasswordHasher<AppUser> hasher = new PasswordHasher<AppUser>();
            user.PasswordHash = hasher.HashPassword(user, "Cevdo_123");
            builder.HasData(user);
        }
    }

public class Customer_CFG : IEntityTypeConfiguration<Customer>
    {
        public void Configure(EntityTypeBuilder<Customer> builder)
        {
            builder.Property(x => x.Name).IsRequired().HasColumnType("varchar").HasMaxLength(25);
            builder.Property(x => x.Surname).IsRequired().HasColumnType("varchar").HasMaxLength(25);
            builder.Property(x => x.TotalBalance).IsRequired(true).HasColumnType("money").HasDefaultValue(0);
         
        }
    }

public class MoneyMovement_CFG : IEntityTypeConfiguration<MoneyMovement>
    {
        public void Configure(EntityTypeBuilder<MoneyMovement> builder)
        {
            builder.Property(x => x.Description).IsRequired().HasColumnType("varchar").HasMaxLength(250);
            builder.Property(x => x.Amount).IsRequired().HasColumnType("money");
        }
    }





5. Data klasörü altına CustomerContext ekledik.

public class CustomerContext:IdentityDbContext<AppUser,AppRole,int>
    {
        public CustomerContext()
        {
            
        }
        public CustomerContext(DbContextOptions<CustomerContext> options):base(options)
        {
                
        }

        public DbSet<Customer> Customers { get; set; }
        public DbSet<MoneyMovement> MoneyMovements { get; set; }
        public DbSet<AppUser>  Users { get; set; }
        public DbSet<AppRole>  Roles { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);

            //başlangıçta burayı yazmadık. 
            optionsBuilder.UseSqlServer("Data source=.;initial catalog=YZL3440_CustDB;integrated security=true");
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            builder.ApplyConfiguration(new AppRole_CFG());
            builder.ApplyConfiguration(new AppUser_CFG());
            builder.ApplyConfiguration(new Customer_CFG());
            builder.ApplyConfiguration(new MoneyMovement_CFG());

            //Iliski rol çoka çok tablosundaki
            builder.Entity<IdentityUserRole<int>>().HasData( new IdentityUserRole<int> { UserId=1, RoleId=1 });

            base.OnModelCreating(builder);
        }

        
    }




6. Program.cs de aşağıdaki eklemeleri yaptık.

// Add services to the container.
builder.Services.AddControllersWithViews(); ALTINDAN-------------

builder.Services.AddDbContext<CustomerContext>(x=>x.UseSqlServer(builder.Configuration.GetConnectionString("ConnStr")));

builder.Services.AddIdentity<AppUser, AppRole>(x => { x.SignIn.RequireConfirmedEmail = false; }).AddEntityFrameworkStores<CustomerContext>()
    .AddRoles<AppRole>();
//DİKKAT!!! SignIn.RequireConfirmedEmail = false; KISMINI APPUSER_CFG İÇİNDEKİ TANIMLANABİLİR. BKZ. CFG



//API GÜVENLİĞİNİ YAZARKEN EKLEDİK.

//JWT
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var secretKey = jwtSettings["secretKey"];

builder.Services.AddAuthentication(opt =>
{
    opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    opt.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = false,
        ValidateAudience = false,

        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
    };
});


var app = builder.Build();------ ARASINDA


VE


// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseSwaggerUI();  //BUNU OTOMATİK EKLEMEDİYSE EKLE
    app.UseExceptionHandler("/Home/Error");
}

VE 

  
app.UseAuthentication(); ALTINA        //DİKKAT!!! VAR OLUP OLMADIĞINA BAKAR. BİR KULLANICI SİSTEME GİRMEYE ÇALIŞIYORSA.
app.UseAuthorization();                  //GİRDİKTEN SONRA YETKİLENDİRME 


VE

AREA EKLENDİĞİNDE
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
      name: "areas",
      pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}"
    );
});

VE

//API GÜVENLİĞİNİ YAZARKEN EKLEDİK.
app.UseCors(x => x.AllowAnyHeader().AllowAnyOrigin().AllowAnyMethod());







7. appsettings.json dosyasına aşağıdaki eklemeleri yaptık.

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },

BURASI İLE

  "ConnectionStrings": { "ConnStr": "Data source=.;initial catalog=YZL3440_CustDB;integrated security=true" },

ARASINA MIGRATIONDAN ÖNCE,

BURASI İLE 
  "JwtSettings": {
    "secretKey": "The most secure key in the world....",
    "validSubject": "JWTServiceAccessToken"

  },

BURASI ARASINA DA API EKLENDİĞİNDE

  "AllowedHosts": "*"

}






8. Migration yaptık.

add-migration
Hata verdi. Boş Constructor ekledik.
Hata verdi. Context içine onconfiguring içine connection string ekledik. onconfiguring içinden silmedik. Bu sadece migration için geçerliymiş.
Hata verdi. CustomerCFG içindeki TotalBalance da true ya çektik ve sonuna HasDefaultValue(0); ekledik.

update-database
Tabloları, ilişkileri, içindeki değerleri ve tiplerini kontrol ettik.






9. Admin ve User kullanıcılarının ulaşabilecekleri sayfaları ayırmak için arealar oluşturuyoruz.
Her areanın kendine ait MVC oluyor.

9.1.a Solution explorer en üst seviyede sağ tık - add - New Scaffolded Item - MVC Area - Add - AdminPanel ismi veriyoruz - Add - gelen scripti program.cs ekledik (yukarıda-startup artık program.cs içerisinde olduğundan - core 5.0 dahil 6.0 a kadar startup içinde hazır bir yapı vardı.) 

9.1.b HomeController oluşturduk.

[Area("AdminPanel")]
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }

9.1.c HomeController un Index.cshtml ini oluşturduk.

<h1>Admin Panel</h1>

-----

9.2.a Solution explorer en üst seviyede sağ tık - add - New Scaffolded Item - MVC Area - Add - UserPanel ismi veriyoruz - Add - gelen scripti bir kere kelemek yeterli. 

9.2.b HomeController oluşturduk.

[Area("UserPanel")]
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }

9.2.c HomeController un Index.cshtml ini oluşturduk.

<h2>User Admin</h2>

<br /><br />

<a asp-controller="Customer" asp-action="Index" class="btn btn-primary">Customer Pages</a>







10. Identity biz sıfırdan uyarladığımız için


10.a Areaların dışındaki genel alanda;

Kendi oluşan HomeController;

public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }




Models klasörü içine ViewModels klasörü içine;

public class User_VM
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Email { get; set; }
        public IFormFile Image { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }



Models klasörü içine DTO klasörü içine;

public class LoginDTO
    {
        
        public string Email { get; set; }
        public string Password { get; set; }
    }






Areaların dışındaki genel alanda LoginController oluşturduk. 

public class LoginController : Controller
    {
        private readonly UserManager<AppUser> _userManager;
        private readonly SignInManager<AppUser> _signinManager;

        //DİKKAT CONSTRUCTOR U KISA YOLDAN DA YAZDIRABİLİRSİN.

        public LoginController(UserManager<AppUser> userManager, SignInManager<AppUser> signinManager)
        {
            _userManager = userManager;
            _signinManager = signinManager;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(LoginDTO login)
        {
            //Veritabanında bu kişinin bulunup bulunmadığını bulduk.
            var user =await _userManager.FindByEmailAsync(login.Email);

            //Bulduğu kişinin şifresini kontrol et.
            var result =await _userManager.CheckPasswordAsync(user, login.Password);    //true / false dönecek.

            //kullanıcı varsa
            if (result) 
                await _signinManager.SignInAsync(user, false);
            else
            {
                ModelState.AddModelError("HATA","Kullanıcı adı veya sifre yanlıs");
                return View();
            }

            return RedirectToAction("Index","Home");
        }


        [HttpPost]
        public IActionResult LogOut()
        {
            _signinManager.SignOutAsync();
            return RedirectToAction("Index","Home");

            //EmptyResult(); özelliklerini araştır.

        }

        public IActionResult Register()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Register(User_VM user)
        {
            AppUser newUser = new AppUser();
            newUser.Name = user.Name;
            newUser.Surname = user.Surname;
            newUser.Email = user.Email;
            newUser.UserName = user.Email;
            newUser.PasswordHash = new PasswordHasher<AppUser>().HashPassword(newUser,user.Password);

            //Image Process...
            string fileName =  user.Image.FileName;
            fileName =Guid.NewGuid().ToString() + "_" + fileName;
            string pathWithName = "wwwroot/profileImages/"+fileName;
            FileStream fs = new FileStream(pathWithName, FileMode.Create);
            await user.Image.CopyToAsync(fs);
            fs.Close();
            newUser.ProfileImagePath = fileName;


            //DİKKAT!!! ASENKRON BİR METODU ASENKRON OLMAYAN BİR YERDE KULLANACAKSAK RESULT EKLENİR. RESULT YAZARSAN DÖNÜŞ DEĞERİNİ (INT VS.) YAZMAZSAN TASKIN TAMAMINI DÖNDÜRÜR.
            //var result=_userManager.CreateAsync(newUser).Result;

            var result=await _userManager.CreateAsync(newUser);
            //Varsayılan olara uye yap...
            await _userManager.AddToRoleAsync(newUser, "User");
            
            return Content(result.Succeeded.ToString());      // sonucun true false dönüp dönmediğini gösterir
        }
    }


10.b Register.cshtml oluşturduk.

@using WebApp_API.Models.ViewModels;
@model User_VM

<form method="post" asp-action="Register" enctype="multipart/form-data">
    <table>
        <tr>
            <td><label asp-for="Name"></label></td>
            <td><input asp-for="Name" /></td>
        </tr>
         <tr>
            <td><label asp-for="Surname"></label></td>
            <td><input asp-for="Surname" /></td>
        </tr>
        <tr>
            <td><label asp-for="Email"></label></td>
            <td><input asp-for="Email" type="email" /></td>
        </tr>
        <tr>
            <td><label asp-for="Image"></label></td>
            <td><input asp-for="Image" type="file" /></td>
        </tr>

        <tr>
            <td><label asp-for="Password"></label></td>
            <td><input asp-for="Password" /> </td>
        </tr>
        <tr>
            <td><label asp-for="ConfirmPassword"></label></td>
            <td><input asp-for="ConfirmPassword" /> </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="submit" value="Register" />
            </td>
        </tr>
    </table>

</form>




10.c Login.cshtml oluşturduk. Create seçerek Scaffold ile yapmayı denedik ama DTO içinde Key olmadığı için hata verdi yapmadı. 
DTO da Email prop üstüne [Key] yazıp yeniden scaffold yaptık oldu. Daha sonra bunu sildik. Ayrıca Context içinde en alta kendisinin yazdığı DbSet prop unu da sildik.

//Dikkat!!! method=post yazmadık ama posta dişeceği için yazmayabiliriz.

@model WebApp_API.Models.DTO.LoginDTO

@{
    ViewData["Title"] = "Login";
}

<h1>Login</h1>

<h4>LoginDTO</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Login">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Login" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div asp-validation-summary="All">
   
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}






11. solution en tepesinde sağ tık - Add - New Scaffolded Item - Identity - Identity - Add - AccountLogout tikle, context seç - Add
Shared klasörü altına _Layout.cshtml altına _LoginPartial.cshtml dosyası geldi. 

Dikkat!!! Program.cs e kendisi aşağıdakini yazıyor.
builder.Services.AddDefaultIdentity<AppUser>.......... BUNU SİL.

_layout.cshtml içinde </nav> üstüne 
<div>
      @Html.Partial("_LoginPartial")
</div>

Şimdi sağ üstteki register ve login yazıları geldi. Fakat üstlerine tıkladığımızda login ve regizter sayfaları gelmiyordu.






12. _LoginPartial.cshtml içinde;
asp-page kullanmadığımızdan else içindeki asp-page tagini aşağıdaki şekilde değiştirdik.


@using Microsoft.AspNetCore.Identity
@using WebApp_API.Models

@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        var user = await UserManager.GetUserAsync(User);
        bool IsAdmin =await UserManager.IsInRoleAsync(user,"Admin");

        if (IsAdmin)
        {
            <li class="nav-item">
                <a id="manage" class="nav-link text-dark" asp-area="AdminPanel" asp-controller="Home" asp-action="Index"  title="Manage">Admin Paneli</a>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a id="manage" class="nav-link text-dark" asp-area="UserPanel" asp-controller="Home" asp-action="Index" title="Manage">Uye Paneli</a>
            </li>
        
        }

    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @UserManager.GetUserName(User)!</a>
    </li>
    <li class="nav-item">
             <form id="logoutForm" class="form-inline" asp-area="Identity" asp-controller="Login" asp-action="LogOut" >
        <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
       @* <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>*@
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-controller="Login" asp-action="Register" >Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-controller="Login" asp-action="Login">Login</a>
    </li>
}
</ul>


Artık login ve register üstlerine tıkladığımızda login ve regizter sayfaları geliyor.
Ayrıca sağ üst tarafta adam adminse adminpanel sayfasına, üyeyse üye panel sayfa bağlantısı gelmesi sağlandı. 
Ayrıca logout yazıldı. yukarıda yorumdaki form tagi değiştirildi.





13. _ViewImports.cshtml ve _ViewStart.cshtml dosyalarını kopyalayıp, AdminPanel ve UserPanel Views klasörleri içerisine yapıştır ve Rebuild yap.




14. Üye Customer ekleyecek. 

14.a Areas - UserPanel - Controllers altında Scaffold ile (model class: Customer, context seç, controllername içinden s yi kaldır, hepsi klikli) aşağıdaki controller oluşturduk ve düzenledik.

[Area("UserPanel")]
    public class CustomerController : Controller
    {
        private readonly CustomerContext _context;
        private readonly UserManager<AppUser> _userManager;

        public CustomerController(CustomerContext context, UserManager<AppUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }


        // GET: UserPanel/Customer
        public async Task<IActionResult> Index()
        {
            //User ile Customer kaydettik ve Indexte geldi fakat diğer Userda da geldi. Hangi User kaydetmişse onun açtığı oturumda çıksın diğer userlarda görünmesin. where .... ekledik ve Indexte AppUser çıkardık.           
            var customerContext = _context.Customers.Include(c => c.AppUser).Where(x=>x.AppUserID==GetUserID());
            return View(await customerContext.ToListAsync());
        }

        // GET: UserPanel/Customer/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null || _context.Customers == null)
            {
                return NotFound();
            }

            var customer = await _context.Customers
                .Include(c => c.AppUser)
                .Include(c=>c.MoneyMovements)
                .FirstOrDefaultAsync(m => m.CustomerID == id);
            if (customer == null)
            {
                return NotFound();
            }

            return View(customer);
        }

        // GET: UserPanel/Customer/Create
        public IActionResult Create()
        {
            //ihtiyac yok...
            //Otomatik olarak sistemden cekeceğiz...
            //ViewData["AppUserID"] = new SelectList(_context.Users, "Id", "Name");
            return View();
        }

        // POST: UserPanel/Customer/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("CustomerID,Name,Surname")] Customer customer)    //Bind içinden TotalBalance,AppUserID sildik. Burada kalırsa mutlaka bizden bekler.
        {

            //DİKKAT KONSOL KULLANDIK MVC ORTAMINDA
            //Console.WriteLine(User.Identity.Name); //AMA SADECE İSMİNİ VERİYOR DOLAYISIYLA EN AŞAĞI METD YAZDIK.

            if (ModelState.IsValid)
            {
                //otomatik olarak UserId' yi nasıl alacağız...
                customer.AppUserID = GetUserID();    //METOD EN ALTTA
                _context.Add(customer);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }

            //combobox ı doldurmaya çalışıyor. ihtiyacım yok.
            //ViewData["AppUserID"] = new SelectList(_context.Users, "Id", "Name", customer.AppUserID);
            return View(customer);
        }

        // GET: UserPanel/Customer/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null || _context.Customers == null)
            {
                return NotFound();
            }

            var customer = await _context.Customers.FindAsync(id);
            if (customer == null)
            {
                return NotFound();
            }
            ViewData["AppUserID"] = new SelectList(_context.Users, "Id", "Name", customer.AppUserID);
            return View(customer);
        }

        // POST: UserPanel/Customer/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to.
        // For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("CustomerID,Name,Surname,TotalBalance,AppUserID")] Customer customer)
        {
            if (id != customer.CustomerID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(customer);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CustomerExists(customer.CustomerID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["AppUserID"] = new SelectList(_context.Users, "Id", "Name", customer.AppUserID);
            return View(customer);
        }

        // GET: UserPanel/Customer/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null || _context.Customers == null)
            {
                return NotFound();
            }

            var customer = await _context.Customers
                .Include(c => c.AppUser)
                .FirstOrDefaultAsync(m => m.CustomerID == id);
            if (customer == null)
            {
                return NotFound();
            }

            return View(customer);
        }

        // POST: UserPanel/Customer/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            if (_context.Customers == null)
            {
                return Problem("Entity set 'CustomerContext.Customers'  is null.");
            }
            var customer = await _context.Customers.FindAsync(id);
            if (customer != null)
            {
                _context.Customers.Remove(customer);
            }
            
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }


//SCAFFOLD DIŞINDA HAREKETLERİN OLDUĞU SONRADAN EKLENEN DETAİLSE GÖSTERECEĞİMİZ AKSİYON
        //Add Cash flow
        public IActionResult AddCashFlow(int id)      //SAYFA AÇILIRKEN CUSTOMER ID Yİ GÖNDERMEMİZ GEREKİYOR.
        {
            //id:customerID
            MoneyMovement movement = new MoneyMovement();
            movement.CustomerID= id;
            return View(movement);
        }

       
        [HttpPost]
        public IActionResult AddCashFlow([Bind("CustomerID,Description,Amount")] MoneyMovement movement) //MoneyMovement İÇİNDEN SADECE Bind("CustomerID,Description,Amount") SADECE BUNLAR OLSUN İSTİYORUZ. YOKSA ŞU BU YOK DİYECEK. ONDAN KURTULMAK İÇİN
        {
            if (ModelState.IsValid)
            {
                //MoneyMovement =>INSERT
                movement.CreateDate=DateTime.Now;
                _context.MoneyMovements.Add(movement);

                //Customer => UPDATE
                var customer=_context.Customers.Find(movement.CustomerID);
                if (customer != null)
                    customer.TotalBalance += movement.Amount;
                _context.Update(customer);
                _context.SaveChanges();
                

                return RedirectToAction("Index", "Customer");
            }
            return View(movement);
        }




        private bool CustomerExists(int id)
        {
          return (_context.Customers?.Any(e => e.CustomerID == id)).GetValueOrDefault();
        }

        private int GetUserID()
        {
           return int.Parse( _userManager.GetUserId(User));
        }
    }




14.b Areas - UserPanel - Views - Home - Index.cshtml içine yukarıdaki controllera bağlanntı ekledik.

<h2>User Admin</h2>

<br /><br />

<a asp-controller="Customer" asp-action="Index" class="btn btn-primary">Customer Pages</a>



14.c Customer Create inde AppUserID altında comboboxta kullanıcı adlarını getirdi ama bize bu lazım değil. Sistemde kim açmışsa otomatik onu kaydetmeli, seçtirmemeli.
Arkaplanda oturum açan kişinin ID sini yakalamam lazım.

@model WebApp_API.Models.Customer

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Customer</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Surname" class="control-label"></label>
                <input asp-for="Surname" class="form-control" />
                <span asp-validation-for="Surname" class="text-danger"></span>
            </div>

            @*Gerek yok.. Ekleyen ID otomatik olarak gelmeli...*@
           @* <div class="form-group">
                <label asp-for="AppUserID" class="control-label"></label>
                <select asp-for="AppUserID" class ="form-control" asp-items="ViewBag.AppUserID"></select>
            </div>*@

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}




14.d Index sayfasında, Edit-Details-Delete ten sonra Cash Flow butonu ekledik ve AppUser kaldırdık.

@model IEnumerable<WebApp_API.Models.Customer>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Surname)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TotalBalance)
            </th>

          @*  <th>
                @Html.DisplayNameFor(model => model.AppUser)
            </th>*@

            <th></th>

            <th>Cash Flow</th>

        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Surname)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalBalance)
            </td>

          @*  <td>
                @Html.DisplayFor(modelItem => item.AppUser.Name)
            </td>*@

            <td>
                <a asp-action="Edit" asp-route-id="@item.CustomerID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.CustomerID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.CustomerID">Delete</a>
            </td>

            <td>
                <a asp-controller="Customer" asp-action="AddCashFlow" class="btn btn-secondary" asp-route-id="@item.CustomerID">Add a Flow</a>
            </td>

        </tr>
}
    </tbody>
</table>



14.e Para hareketinin girileceği ekranı ekledik. Controller içinden aksiyon üzerinde sağ tıkla - Scaffold ile (ViewName: AddCashFlow, template create, class:MoneyMovement, context seç, create... kliksiz, altındaki diğer ikisi klikli) 

@model WebApp_API.Models.MoneyMovement

@{
    ViewData["Title"] = "AddCashFlow";
}

<h1>AddCashFlow</h1>

<h4>MoneyMovement</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddCashFlow">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <input type="hidden" asp-for="CustomerID" />      

            @*<div class="form-group">                                                GEREK YOK, LİNKTEN GİDECEK.
                <label asp-for="CustomerID" class="control-label"></label>
                <select asp-for="CustomerID" class ="form-control" asp-items="ViewBag.CustomerID"></select>
            </div>*@

          @*  <div class="form-group">                                                GEREK YOK, DATETIME.NOW DAN GİDECEK.
                <label asp-for="CreateDate" class="control-label"></label>
                <input asp-for="CreateDate" class="form-control" />
                <span asp-validation-for="CreateDate" class="text-danger"></span>
            </div>*@

            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Add Cash Movement" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



14.f Add a flow butonundan para hareketi girdik ve listede bakiyenin doğru hesaplayıp hesaplamadığını kontrol ettik.





























