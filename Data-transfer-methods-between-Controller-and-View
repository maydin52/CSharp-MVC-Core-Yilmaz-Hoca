Dikkat!!! Güven konusu çok öenmli.

MVC Core 6

Her birinin avantajı ve dezavantajları var.

Veri taşımak için kullandığımız class lara model denir.

PARANTEZLERİ RENKLENDİRİYOR.
Tools - options - text editor - display altındaki enable brace pair colorization klikle!

Bazı şeyleri bilmek ayrıdır, tercih etmek ayrıdır.

---------------------------------------------------------------------------------------------------------------------
A-Controller dan View'e Veri aktarma yontemleri...

KULLANIM ŞEKLİ, SIKLIĞI SIRALAMASI; NUMBER-X

Inputlardan girilen verileri sunucuya gönderme. Örneğin kullanıcı adı ve şifre.

----------

1-ViewData
***ViewData Dictionary mantıgiyla calisir...
***Key-value pairs
***Tip donusumu yapmak gerekir...
ViewData ve ViewBag arasındaki temel fark; ViewData da object tuttuğundan tip dönüşümü yapmak zorundayız ama ViewBag de dynamic tuttuğundan tip dönüşümü yapmak zorunda değiliz.

1.a urun classı oluşturduk.
public class Urun
    {
        public int UrunID { get; set; }
        public string UrunAdi { get; set; }

        public string KategoriAdi { get; set; }
        public double Fiyat { get; set; }
    }

1.b controller oluşturduk.
public class GonderController : Controller
    {
        public IActionResult Index()
        {
            ViewData["mesaj"] = "Merhaba MVC";          //DİKKAT!!! imzasında ViewDataDictionary. Dictionary koleksiyon çalışma mantığı: Key Value prensibine göre çalışır. 
                                                                   Yani key verirsiniz, value sini tutarsınız. Yani bu yapı arkaplanda  Hastable, Dictionary altyapısı kullanıyor.
                                                        // "Merhaba MVC";  nin tipi obje

            ViewData["Sehirler"] = new string[] { "Istanbul", "Ankara", "Bursa" };

            Urun urun1 = new Urun() { UrunID = 123, UrunAdi = "Klavye", Fiyat = 259 };
            ViewData["urun"] = urun1;

            return View();
        }

1.c yukarıdaki Index üzerinde sağ tıklayıp Index aksiyonu oluşturduk.
<h2>ViewData Kullanımı...</h2>
@ViewData["Mesaj"]
<br />
@foreach(var item in (string[])ViewData["sehirler"])        //DİKKAT!!! ViewData geriye object değer döndürür ama biz string gönderdiğimiz için hata verdi. Sonra cast ettik.
                                                                                                                              Tip dönüşümü yaptık. 
{
    @item
}
@ViewData["Urun"]          //namescape çıktı!!!!!   @ViewData["Urun"]. dedikten sonra propertylerine erişemiyoruz. 
<br />
@{
   int ID= ((Urun)ViewData["Urun"]).UrunID;          //Cast ederek propertylerine eriştik.
}
@ID

1.d çalıştırıp tarayıcıdan ..../Controller/Action yazarak sayfayı aç ve kontrol et.

------

2-ViewBag NUMBER-3
***ViewBag : Veriyi dynamic olarak tutar
***Her seferinde tip donusumu yapmaya gerek yoktur, kendisi halleder...
ViewData dan sonra gelmiştir.

2.a urun classı oluşturduk.
public class Urun
    {
        public int UrunID { get; set; }
        public string UrunAdi { get; set; }

        public string KategoriAdi { get; set; }
        public double Fiyat { get; set; }
    }

2.b controller oluşturduk.
public class GonderController : Controller
    {
        public IActionResult Index()
        {
            ViewBag.Message = "Hello MVC";        //.Message dynamic. var da tip bir kere oluştu mu sonra değişemez. dynamic te tip her seferinde değişebilir. Yani arka planda 
                                                                                      dynamic altyapısını kullanıyor.

            ViewBag.Cities = new string[] { "London", "Paris", "Roma" };

            Urun urun1 = new Urun() { UrunID = 123, UrunAdi = "Klavye", Fiyat = 259 };
            ViewBag.Product  = urun1;

            return View();
        }

2.c yukarıdaki Index üzerinde sağ tıklayıp Index aksiyonu oluşturduk.
<h2>ViewBag Kullanımı</h2>
@ViewBag.Message
<br />
@foreach (var item in ViewBag.Cities)
{
    @item
}
@ViewBag.Product      //namescape çıktı!!!!!  
<br />
@ViewBag.Product.UrunID @ViewBag.Product.UrunAdi @ViewBag.Product.Fiyat

----------

3-TempData
TempData: Bir veriye birden fazla Controller yada aksiyondan ulasmak icin kullanırız...
*** Veri ilk kullanıldıktan sonra silinir...
*** Istenirse Veri Kalıcı hale getirilebilinir...
*** Performans açısından(Memory kullanımı) dikkatli olmak gerekir...


3.a controller oluşturduk.
public class GonderController : Controller
    {
        public IActionResult Index()
        {
            TempData["veri"] = "Bu veri onemli veri...";        //imzaya bak. generic versiyonu.
            TempData.Keep();            // Bkz alttaki aksiyon açıklaması.

            return View();    //Parantez içinde "" içinde view ismi yazasan isteğin viewe gönderebilirsin.
        }

        public IActionResult TempDataVerisiGoster()             //TempData() yazdık kızdı. dikkat!!!
        {
            TempData.Keep("veri");            // Bunu yazmazsak ilkinde kullanıldıktan sonra ikinci aksiyonda gelmez. kalıcı hale getirmek için. 
                                                    Fakat performans ramde kalacağı için. Yukarıda da var. rami yönetmek açızından riskli.
            return View();
        }

3.b yukarıdaki Index üzerinde sağ tıklayıp Index viewi oluşturduk.
<h2>TempData</h2>
@TempData["veri"]

3.c yukarıdaki TempDataVerisiGoster üzerinde sağ tıklayıp TempDataVerisiGoster viewi oluşturduk.
<h2>TempData verisini goster</h2>
@TempData["veri"]

3.d çalıştırıp tarayıcıdan ..../Controller/Action yazarak sayfayı aç ve kontrol et.

---------

4-Model NUMBER-1
Model: En fazla kullanılan yontemlerden biridir...
*** Model içerisindeki tum veriler front-end tarafında calisanlar tarafında gorulur..
*** tanımlarken  @model
*** kullanırken  @Model


4.a urun classı oluşturduk.
public class Urun
    {
        public int UrunID { get; set; }
        public string UrunAdi { get; set; }

        public string KategoriAdi { get; set; }
        public double Fiyat { get; set; }
    }


4.b 
public class GonderController : Controller
    {
        public IActionResult ModelGoster()
        {
            //Model Tek bir nesne ise;
            //Urun urun1 = new Urun() { UrunID = 123, UrunAdi = "Klavye", Fiyat = 259 };
            //return View(urun1);        // view imzalarına bak; 4 tane var. model yazdığına göre direkt modeli yazabiliyoruz. Birden fazlaysa ViewModel

            //Model Koleksiyon ise;

            List<Urun> urunler = new List<Urun> {
               new Urun() { UrunID = 123, UrunAdi = "Klavye", Fiyat = 259 },
               new Urun() { UrunID = 125, UrunAdi = "RAM", Fiyat = 2500 },
               new Urun() { UrunID = 127, UrunAdi = "SSD", Fiyat = 3500 }
            };

            return View(urunler);
        }
    }



4.c yukarıdaki ModelGoster üzerinde sağ tıklayıp ModelGoster viewi oluşturduk.

@*@model Urun            //önce sayfanın üstünde modelin tanımlanması gerekir. Tanıtırken küçük m, çağırırken büyük M

@Model.UrunID @Model.UrunAdi @Model.KategoriAdi @Model.Fiyat*@            //ViewData da tip dönüşümü, ViewBag de front-endçiye tüm propertyleri her eklediğinde vermek zorundasın. . ile glmiyor.
                                                                                Ama modeli kullanırsa herşeyi görüyor. Modeli değiştirsende görüyor. Veya sadece istediğimiz propertylerinde
                                                                                    karşısına çıkmasını sağlayabiliriz.
                                                                                Yani bağımlılığı minimuma indiriyor.


@model IEnumerable<Urun>        // sayfanın en başında tanımlanır. 
                                                    Neden IEnumerable? Foreach koleksiyonlar üzerinde çalışır. Ienumerable arayüzünü implemente etmiş olan sınıflarda çalışır.
                                                                        Demekki her koleksiyonda IEnumerable var. Yukarı List yazsaydık adam List göndermek zorundaydı. 
                                                                        Böylelikle ne gönderirse göndersin kullanılabilir.


<table class="table table-striped">        //bootstrap ekledik. table-striped bir satır gri bir satur beyaz
 @*   <tr>                                //Başlık getirmede 1. Yöntem; fakat bunda model değişince burası değişmez.
        <th>  UrunID </th>
        <th>  UrunAdi </th>
        <th>  Fiyat </th>
    </tr>*@
    <tr>                                    //Başlık getirmede 2. Yöntem; bunda modelde değişince burası da değişiyor.
        <th>  @Html.LabelFor(x=>x.Single().UrunID) </th>
        <th>  @Html.LabelFor(x=>x.Single().UrunAdi)   </th>
        <th>  @Html.LabelFor(x=>x.Single().Fiyat) </th>
    </tr>
@foreach(var item in Model)        //Dikkat Model. item. yazınca propertyleri geldi.
{
    <tr>
            <td>  @item.UrunID </td>
            <td>  @item.UrunAdi </td>
            <td>  @item.Fiyat </td>
    </tr>
}
</table>


---------
5-ViewModel NUMBER-2
ViewModel: birden fazla modeli bir sayfaya gondermek istersek kullanırız...



5.a classları oluşturduk.
public class Personel
    {
        public int PersonelID { get; set; }
        public string Ad { get; set; }
        public string Soyad { get; set; }
        public int BolumID { get; set; }
    }


public class Bolum
    {
        public int BolumID { get; set; }
        public string BolumAdi { get; set; }
    }


public class PersonelVM
    {
        public int PersonelID { get; set; }
        public string Ad { get; set; }
        public string Soyad { get; set; }
        public string BolumAdi { get; set; }
    }



5.b 
public class GonderController : Controller
    {
        public IActionResult ViewModelGoster()
        {
            List<Personel> personeller = new List<Personel>() {
              new Personel{ PersonelID=1, Ad="Cevdet", Soyad="Dursun", BolumID=1 },
              new Personel{ PersonelID=2, Ad="Selami", Soyad="Atmaca", BolumID=2 },
              new Personel{ PersonelID=3, Ad="Dursun", Soyad="Durmasin", BolumID=1 }
            };

            List<Bolum> bolumler = new List<Bolum>() { 
              new Bolum(){ BolumID=1, BolumAdi="Muhasebe" },
              new Bolum(){ BolumID=2, BolumAdi="Satış" },
            };
            //Problem ne ???
            //BolumID degil BolumAdi gosterilmeli...
            //Tüm alanlar giderse tablonun boyutu büyür bu yapılmamalı.
            //1.Yontem :Navigation Prop. kullan("Eager Loading veya Lazy Loading")...   HOCA DİĞER ÖRNEKTE GÖSTERECEK. 
                                                                Mesela adam fatura detayını görmek istiyor. Orada Nav prop kurtarmaz. Mecburen viewModel kullanmak zorundasınız. 
                                                                ViewBag büyük projelerde yönetimi sıkıntılı.  
            //2.Yontem :ViewModel
            // önüne veya sonuna VM eklenir; ViewModel
            // Eğer PersonelVM i Personel de miras alsaydık bölümId de gelirdi. Bunu istemiyoruz. 
            // Hatta access modifier protected de kullanabilrdik ama istemiyoruz, ViewModeller bu şekilde hep özel oluşturulan yapılardır.
            //VM adı üstünde. sadece ekranda kullanıcıya verileri gösterebilmek için. 

            //Bunu EF de yaptığımız gibi var result = from p in personeller.... şeklinde de yazabiliriz.
            var result = personeller.Join(bolumler, x => x.BolumID, y => y.BolumID, 
                (x, y) => 
                        new PersonelVM
                        { PersonelID = x.PersonelID, Ad = x.Ad, Soyad = x.Soyad, BolumAdi = y.BolumAdi }) ; 
           return View(result);
        }


        //Hoca bu durumu MS dökümanlarında görebilirsiniz diye özellikle anlattı. 
        //DİKKAT!!! ViewData ile tanımlandı. ViewBag ile çağrıldı. Viewe bkz.
        public IActionResult OzelDurum()
        {
            ViewData["data"] = "DATA";
            return View();
        }

    }



5.c ViewModelGoster viewi
@*@model IEnumerable<Personel>

@foreach(var item in Model)
{
    @item.PersonelID @item.Ad @item.Soyad @item.BolumID
}*@


@model IEnumerable<PersonelVM>

<table>
    @foreach(var p in Model)
    {
    <tr>
        <td>@p.PersonelID</td>
        <td>@p.Ad</td>
        <td>@p.Soyad</td>
        <td>@p.BolumAdi</td>
    </tr>
    }
</table>


5.d OzelDurum viewi
@ViewBag.data


--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------

B-Viewden Controller'a Veri aktarma Yontemleri...

Inputlar aracılığıyla girilen verileri nasıl yakalarız???
Kullanıcıdan veriyi alıp comtrollera aktarma konusu.

1-QueryString Yöntemi: 
Kullanıcının girdigi veriler adres cubugnda adres verisinden sonra aktarılsın istiyorsak kullanırız...


1-a
public class YakalaController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }

        public IActionResult QueryString()            //DIKKAT!!! View oluşturmadık.
        {
            //return View();                                     //Hata verdi. Çünkü sayfa istiyordu. Sildik Content olarak değiştirdik. bkz aşağı.
            //Request.QueryString.Value                                 //Request:Talep. Sayfa oluşturmadan direkt gelen değeri Indexte gösterdik.
            return Content("Gelen deger :" + Request.QueryString.Value);    //Content; geriye string değer döndürür. sayfada parantez içindekileri (yakaladığı da dahil) yazar.
        }
    }


1-b Yakala controllerin Index.cshtml
@model Urun                                                     //@*yorum satırı*@  
@*QueryString üzerinden veri gonderme*@                         //Kullanıcıdan verileri alabilmek için form tagi kullandık.
<form method="get" asp-action="QueryString">                    //method yazmasakta varsayılanı get ama çıkmadı method="get" ekledik. istiyor. QueryString adres çubuğunda gösterecek veriyi.
    <input type="text" id="id" name="id" />                     //DİKKAT!!! name bilgisi model ile aynı olmalı.
    <input type="text" id="ad" name="ad" />
    <input type="text" id="kategori" name="kategori" />
    <input type="text" id="fiyat" name="fiyat" />
    <input type="submit" value="Gonder" />
</form>


1-c ...../Yakala/Index veya ...../Yakala                    //inputlara değerler girip butona bastıktan sonra adres çubuğuna değerleri yazdı. Content Gelen deger bilgisi gövdeye geldi.
                                                            //Kullanımı sıkıntı. Adam şifre girdiyse açığa çıktı. Fakat bazı durumlarda bu şekilde veri aktarımı yapılıyor.
                                                            //Bunu controllerda aksiyonda yakalıyoruz.

------------

2-Request.Form Yöntemi:

2-a
public class YakalaController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }

        [HttpPost]                                        //Aksiyona gelen değeri yakalamasını söylemem gerekiyorsa;
        public IActionResult RequestForm()
        {
            //[] arasına yazılan isim; form da verilen name ile aynı olmalı...
            int id = int.Parse( Request.Form["id"]);                //Casti genellikle büyük tipten küçük tipe çevirmek için kullanırız. Örn: Personel nesnesi var ama objeye atmış.
                                                                        // Bu şekilde genelde objeden Personele cast ederiz. Aynı seviyedeki dönüşümler için ya parse, ya da convert gibi.
            string ad = Request.Form["ad"];

            return Content("Gelen deger :" + id + " " + ad);
        }
    }


2-b Yakala controllerin Index.cshtml
@model Urun
<h2>Request Form</h2>
<form method="post" asp-action="RequestForm">            //DİKKAT!!! method="post"
    <input type="text" id="id" name="id" />
    <input type="text" id="ad" name="ad" />
    <input type="text" id="kategori" name="kategori" />
    <input type="text" id="fiyat" name="fiyat" />
    <input type="submit" value="Gonder" />
</form>

2-c ...../Yakala/RequestForm                 //soldaki adreste gövdede içerik çıktı.



------------

3-IFormCollection Yöntemi:


3-a
public class YakalaController : Controller
    {


    }



3-b Yakala controllerin Index.cshtml
@model Urun
<h2>IFormCollection</h2>
<form method="post" asp-action="FormCollection">            //DİKKAT!!! method="post"
    <input type="text" id="id" name="id" />
    <input type="text" id="ad" name="ad" />
    <input type="text" id="kategori" name="kategori" />
    <input type="text" id="fiyat" name="fiyat" />
    <input type="submit" value="Gonder" />
</form>

3-c ...../Yakala/Index veya ...../Yakala  


------------

4-Parametre Yontemi: NUMBER-2

4-a
public class YakalaController : Controller
    {


    }


4-b Yakala controllerin Index.cshtml
@model Urun
<h2>Parameters</h2>
<form method="post" asp-action="Parameters">                //DİKKAT!!! method="post"
    <input type="text" id="id" name="id" />
    <input type="text" id="ad" name="ad" />
    <input type="text" id="kategori" name="kategori" />
    <input type="text" id="fiyat" name="fiyat" />
    <input type="submit" value="Gonder" />
</form>

4-c ...../Yakala/Index veya ...../Yakala  


------------

5-Model Yöntemi: NUMBER-1


5-a
public class YakalaController : Controller
    {


    }


5-b Yakala controllerin Index.cshtml
@model Urun
<h2>Models</h2>
<form method="post" asp-action="Models">                //DİKKAT!!! method="post"
    <input type="text"  asp-for="UrunID" />
    <input type="text"  asp-for="UrunAdi" />
    <input type="text"  asp-for="KategoriAdi" />
    <input type="text"  asp-for="Fiyat" />
    <input type="submit" value="Gonder" />
</form>

5-c ...../Yakala/Index veya ...../Yakala  

------------

