Tarih uzatma Proje 3=>2 Aralık...

RESTful Services
1 Hafta MVC-Web Proje (25-26)

Stored-procedure (2)
Invoice-Detail
.NET 8 ile gelen yenilikler
Proje Teslim...

SOLID 3 Aralık


https://www.chartjs.org/


-----------------------------------------

Distributed Architecture(Dağıtık Mimari) uygulamalarına örnekler;
WebApp
RESTFul Services
Sohbet uygulamaları
File sharing uygulamaları
sql server
multiplayer oyunlar

Client-Server olması hepsinin ortak özelliği;

1960 lara kadar gidiyor.
Main frame system.
dummy client systems


Örneğin; 
sağlık bajkanlığına aait bir hastaneye gittik. 
girdiğimizde müstehaklık sorgulaması yaptıklar.
Benim bu hizmeti alıp alamayacağımın bilgisi SGK'da.
Servis yapısı olmasaydı, oradan SGK ya bağlanıp bir select sorgusu çalıştıran butona tıklayıp çalıştıracak. Ne kadar güvenli?
Servis bir ara yapıdır, katman olarak ta düşünülebilir. Servis denilen yapı bir class ve classın nesneleri.
SGK diyorki sen bana parametre olarak TC No gönder, gerisine karışma. Ben sana sonucu döndüreceğim.
Aynı zamanda soyutlama var, yani gerçek sisteme adamı karıştırmıyoruz.

Servisler sadece yukarıdaki uygulamalar için değil, örneğin nvidia now teknolojisi için de kullanılıyor. Sonuç sunucuda render edilip kullanıcıya geliyor.
Aslında 1960 da da vardı. Main frame güç kaybetti, client servisler güç kazandı.
Artık yapı clouda doğru giderken biz yine dummy clientlere doğru gidiyoruz.
Yakında bu kadar cipe gerek yok ya da fiyat arttıracaklar vs yavaş yavaş giyilebilir cihazlara ve doğru gidiyor. 
Yani gelen veriyi göster, aldığın veriyi gönder sistemine evriliyor. 
2001-2022 yılında hocaya remoting anlatılırken duyduğu; MS servis tabalı bir işletim sistemi üzerinde çalışıyor denilmiş. 
2010-2012 yılında biz servis tabanlı işletim sistemini azure işletim sistemini gördük. 

Örnekler;
Muhasebe uygulamaları artık kişisel bilgisayarlarda tutulmayacak. Bu iş için uzman yerler olacak ve oadan kullanacaksınız.
Photoshop kullanmayacaksınız, resmi gönderip ne istediğinizi yazacaksınız, sonuç geri gelecek. 
-- İleride gelecek -- ileride pclere işletim sistemi yüklenemyecek ya ni hardcopy olmayacak. 60 lı yıllardan bu zamana kadar geniş bant yüzünden bekledik.

Otel konaklama bilgileri de otomatik olarak kolluk kuvvetlerine gönderiliyor.
 

Services teknolojileri tarihçesi: 1960 lı yıllardan beri gelen teknoloji
CORBA
Remoting
XML Web Services - DİKKAT!!! Bu ve sonrasındakileri çalışır olarak piyasada karşılaşabilirsin.
WCF(Windows Communication Foundation) - 2008 de MS tüm yapıyı değiştirdi ve bunu çıkardı. 2019 da desteğini kesti. Daha önce 20 den farklı protokolü kullanabiliyorduk. Bunları birleştirdi.
  SOAP(Simple Object Access Protocol) => XML based - geriye dataset gönderiyor ama client örn apple olunca dataset ne? - bu cihazlara ado.net yüklemen gerekiyor çünkü dataset oradan geliyor. 
	Mesela apple daki int ile senin int aynı değil. Kiminde 8 byte kiminde 4 byte gibi. Yani ortam bağımlı çalışıyor. 
	Diğer sorun; Envelope yani zarf gibi. yani bir header ı var bir de datası var ve bu da bir xml dosyası.
	SOAP protokolünde; ben bir servise bağlanıyorum, raminde bir nesne var, ben buradan o nesneyi invoke etmem (yani tetiklemek, çalıştırmak) gerekiyor. 
	O zaman lokalde bir proxy nesneye ihtiyaç var onu refere edecek. Proxy nesnenin oluşması için de metadata ya ihtiyaç var. 
	Yani SOAP ın karışıklığı, ikincisi XML in veri taşırken çok büyük boyutta olması, çünkü bantwidth i etkiliyor ve üç platform uyumsuzluğu.

RESTful Services :2000 Yılı Doktora Tezi=>Roy J. Fielding.. şimdilik HTTP protokolü üzerinde çalışır. günümüzde neredeyse her cihazda bir browser var vr browser olan yerde bu servis çalışır. ayrıca ortam bağımsızlığı avantajı
	client-server yapısını desteklemeli.
	stateless bir protokol olmalı.
	verbler kullanılmalı.
	json xml e göre yarı yarıya daha az. bant genişliği avantajı
	bana datasetmiş vs bana sadece datayı gönder. SAOP taki gibi envelope kavramı yok bunda. gelen data json formatında istediğin gibi kullan göster.
	2010 dan sonra popüler olmaya başladı.

    WebAPI:
	MS in restful servis altyapısıyla çalışan teknolojisinin adı.

	https://halilozel1903.medium.com/rest-ve-restful-nedir-f6c8596eb38a

	MS tarafından geliştirilmiştir....

	MVC altyapısını kullanır...(View Yok...). ben saba datayı gönderiyorum sen kullanıcıya istediğin gibi göster.


	VS2022 => Artık Controller da kullanmak zorunda degiliz...(Minimal API)
	Örneğin docker ile kullanıldığında controller kullanmazsak docker boyutu azalıyor. 
	Ayrıca controller sınıfından türetme de olmayacağı için daha az ram kullanıyor.
	dosya boyutu olarakta avantajlı.
	Dolayısıyla docker da örn 1000 kont taşıyabilecekken 2000 kont taşıyorsun. 
	program.cs te karşılayacak middleware yazılması gerekiyor. Dolayısıyla extra controller yazılmasına gerek kalmıyor.
	2022 de geldi ve geliştirilmeye devam ediyor. 


	Microservice yazdık 5 yıldır çalışıyor diyelim. 
	MS işletim sistemini güncelledi. 
	Hayda çalışan sistem bazen çalışmaz olur.
	Ya bunları sürekli çalışmadıkça değiştirmen gerekiyor ya da ducker kullanmak gerekiyor. Bize işletim sisteminden bağımsız küçük micro sistemler oluşturuyor. 
	Servisi yazıyprsunuz ve bunu docker container e atıyorsunuz. Fakat 2 mb servis dosyası orada 200 mb oluyor. Yani izole bir sistem oluşturuyor. İşletim sistemi update edilsede servis çalışıyor. 
	Docker a ilgili sınıflarında yüklenmesi gerekiyor görmesi için.
	


WebAPI teknolojisiyle Restful servisi oluşturuyoruz; Bu arada MVC projesi içinden de açılabilir daha sonra MVC projesine de eklenebilir. İlla projeden ayırmak zorunda değiliz. 

1- vs code aç - ASP.NET Core Web API seç - Next - dosya adı veiyoruz WebApplication1 - Next - Framework 6.0, configure kliksiz, autho none, enable docker kliksiz, use controllers klikli, enable OpenAPI klikli, do not use kliksiz ve Create

Aşağıdakiler dosyanın sample verileri;

using Microsoft.AspNetCore.Mvc;

namespace WebApplication1.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase		//DİKKAT!!! Buradaki controller ControllerBase den türüyor. Yani düz controllerdan türüyor. Yani View desteği yok. 
    {
        private static readonly string[] Summaries = new[]
        {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet(Name = "GetWeatherForecast")]			//DİKKAT!!! HTTP VERB => her eylemin bir ismi var. HTTPGET-SELECT, HTTPPOST-INSERT, HTTPDELETE-DELETE, HTTPPUT-UPDATE e karşılık geliyor sqlde. Başka da var ama sıklıkla bunlar kullanılıyor.
        public IEnumerable<WeatherForecast> Get()			//DİKKAT!!! MVC gibi actionlar var.
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}

2- Çalıştırdığımızda swagger arayüzü geldi. Varsayılan web tabanlı test clienti.
Request URL : Servisin adresi

JSON datası yorumlamak.

veriyi taşımak için;
Ramdeki bir objeyi alıp JSON a çevirmek istediğimde Serilizaiton yapmam gerekiyor.
Karşıda ise Deseriliaze yapmam gerekiyor.

köşeli parantez dizi - list e karşşılık, object - classa karşılık, property-property e karşılık

yani bizim bunu karşılayacak sınıfı yazmamız gerekiyor. Tip dönüşümü yapacağım.

Servise;
-web uygulamasından,
-consoldan,
-winform dan,
-mvc den vs bağlanabilirim ve kullanabilirim.

web sayfası üzerinden bağlanacaksak ya AJAX yani XMLHTTPREQUEST veya FETCH , diğerleri üzerinden HTTPCLIENT istemcisi oluşturarak ve o nesneyi kullanarak.

reqres.in sitesini inceledik.

----------------------------------------------------------
WebAPI

MVC Core da olan Controller lar => Controller sinifindan kalıtım alırken webAPI Controller'lar => ControllerBase sınıfından kalıtım alır...

Neden??? WebAPI de View destegi yok...

RESTful servisleri test etme araçları(tools)
-Swagger(HTML base) projeyi oluştururken OpenAPI seçersen otomatik geliyor ama projeyi publish ederken kaldırılması gerekiyor 
(program.cs içindeki;
// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
IsDevelopment tan bunu anlıyor.
)
-PostMan
-Fiddler

***Swagger icin => HttpVerb'ler tanımlanmalı...
[HttpGet]
public string Merhaba(){}

***Swagger hata versede HttpGet yazmasakta olur !!!(Birden fazla olacaksa mutlaka tanımlanmalı...) 

WebAPI de Aksiyonların return tipleri
1) void ***
2) Ontanımlı tipler yada complex(class, koleksiyon) tipler
3) HttpResponseMessage (CORE oncesi ...)
4) IActionResult ***** (Async)

[] HttpVerbs
[HttpGet]  => SELECT(Client'a veri gider(NSA))
[HttpPost] => INSERT(Veri client dan gelir)
[HttpPut]  => UPDATE(Veri client dan gelir)
[HttpDelete]=> DELETE(Veri client dan gelir)


Servisleri olusturduktan sonra Client tarafında yapılacaklar...

Clients
  1-Düz HTML Sayfası...(AJAX, Fetch)JS

  2-MVC
  3-Window Forms 
  4-Console
  (2,3,4 => HttpClient)




1- vs code aç - ASP.NET Core Web API seç - Next - dosya adı veiyoruz WebApplication1 - Next - Framework 6.0, configure kliksiz, autho none, enable docker kliksiz, use controllers klikli, enable OpenAPI klikli, do not use kliksiz ve Create

2- Controller klasöründe sağ tık - add - controller - DİKKAT!!! soldan Common altındaki API seçilir, gelen listeden empty seçilir (ikisi arasındaki fark bunun abstract controllerbase sınıfından miras almış olması) - BaslangicController - Add

3- BaslangicController içinde aşağıdakileri ekledik.

ilk çalışınca swagger hata verdi. Normal.
..../api/baslangic olarak çalıştırılır.
Swagger her aksiyonun önünde bir HTTPVerb olmasını istediği için kızıyor. Yazmasamda varsayılan HttpGet.
State yönetimi; yani restfuldaki representive state, durum yönetimi. 
Sonucu response body den gördük. Code önemli 200 döndü.
100-500 arası hata tipleri vardır.
Bu kodlar beş kategoride sınıflanır.
https://www.niobehosting.com/blog/http-server-durum-hata-kodlari-ve-anlamlari/
Bilgilendirici HTTP Durum Kodları  (100-1xx)
Başarılı HTTP Durum Kodları         (200-2xx)
Yönlendirme HTTP Durum Kodları (300-3xx)
İstemci Hata HTTP Durum Kodları (400-4xx)
Sunucu Hata HTTP Durum Kodları (500-5xx)


//Restful servislerdeki işin güzelliklerinden bir tanesi de; artık burada HttpVerb ler var ve metod yani aksiyon isimlerinin anlamı yok. Sistem metod isimleri değil HttpVerb e bakıyor. İki get olunca hata vermişti.
//Ayırtedici isim verdi. "hi".


using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    
    //[Route("api/[controller]")]		//ROUTING İKİ ŞEKİLDE OLABİLİR; YA PROGRAM.CS E YAZILIR YA DA BURADAN ATTRIBUTE İLE (ATTRIBUTE ROUTING)
    [Route("servis/[controller]")]	//Özelleştirilebiliyor.
    [ApiController]
    public class BaslangicController : ControllerBase
    {
        [HttpGet]					// ....../servis/baslangic/
        public string Merhaba()			// Aksiyonların NŞA 4 tane return type olabilir; en çok iki tanesini kullanıyoruz. ÖRNEKLER AŞAĞIDA.
						WebAPI de Aksiyonların return tipleri
						1) void ***
						2) Ontanımlı tipler yada complex(class, koleksiyon) tipler
						3) HttpResponseMessage (daha çok CORE oncesi ...)
						4) IActionResult ***** (Async desteği) en çok kullanılan. servislerde asenkron prog desteklediği için en çok tercih edilen.
        {
            return "Merhaba WebAPI";
        }

        [HttpGet("hi")]					// ....../servis/baslangic/hi
        public string Hello(string str)		//swagger üzerinden girilen parametre request URL deki querystring e ekleniyor. Veriyi querystring üzerinden servis bekliyorsa gönderebilirsin. Ya da aksiyona parametre tanımladığımda aksini söylemedikçe querystring üzerinden geleceğini anlamamız gerekiyor.  
        {
            return "Hello WebAPI " + str;
        }

    }
}

---------------------- RetunTipleriController

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RetunTipleriController : ControllerBase
    {
        [HttpPost]
        public void Ekle()		//1. MADDE. DİKKAT!!! EKLE NİN HTTPVERB İ HTTPPOST. GERİYE DEĞER DÖNDÜRMESİNE GEREK YOK AMA GET VE SELECT LERDE BİR DEĞERİN DÖNMESİ LAZIM.
        { 
            //1.Return Type=> void
        }

        [HttpGet]
        public IEnumerable<string> Sehirler() {				//2. MADDE. DİKKAT!!! SWAGGER DAN KONTROL ETTİĞİNDE DİZİ JSON OLARAK GELDİ.
            //2.Return Type => On tanımlı tip yada complex tip..
            string[] sehirler = { "Istanbul", "Ankara", "Bursa" };

            return sehirler;
        }

        [HttpGet("resp")]					//DİKKAT!!! SAYFADA İKİ GET OLDUĞUNDAN BUNA İSİM VERDİK.
        public HttpResponseMessage Ekle(int? id)		//3. MADDE. DİKKAT!!! BİZİM YÖNETİMİMİZDE. İSTEDİĞİMİZ GİBİ HATA DÖNDÜREBİLİRİZ. ASENKRON DESTEĞİ YOK. ESKİ USÜL.
        {
            //3.Return Type=> HttpResponseMessage

            if (id <0)
                return new HttpResponseMessage(System.Net.HttpStatusCode.BadRequest);
            else
                return new HttpResponseMessage(System.Net.HttpStatusCode.OK);
        }

        [HttpGet("ara")]
        public IActionResult Ara(int? id)			//4. MADDE. 
        {
            if (id < 0)
                return BadRequest();			//YUKARIDAKİ UYGULAMANIN BURADAKİ UYGULANIŞI.

            return Ok();
        }
    }
}

--------------------------------

POSTMAN KULLANIMI

1- Yukarı + dan sayfa aç

2- yeşil GET yazan yere tıkla ve yanındaki adres kısmına swagger daki request URL adresini kopyala ve yapıştır. (...../route/controller)

3- Aşağıda parametre girilmesi grekiyorsa haneler açıldı. Girişleri yap ve Send butonuna tıkla.

4- Aşağıya gelen değer json olarak çıktı.

--------------------------------

[] HttpVerbs
[HttpGet]  => SELECT(Client'a veri gider(NSA))
[HttpPost] => INSERT(Veri client dan gelir)
[HttpPut]  => UPDATE(Veri client dan gelir)
[HttpDelete]=> DELETE(Veri client dan gelir)



MOdels klsörü içerisinde;
namespace WebAPI.Models
{
    public class Kitap
    {
        public int KitapID { get; set; }
        public string KitapAdi { get; set; }
        public double Fiyat { get; set; }
    }
}


--EF KULLANMADAN HttpVerbs KULLANIMI

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebAPI.Models;

namespace WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class KitapController : ControllerBase		
    {
        static List<Kitap> _kitaplar = new List<Kitap>() { 			//NEDEN STATIC ??? PROGRAM KAPANMADIKÇA VERİLER KALIR. VERİTABANINI SİMÜLE ETTİK.
           new Kitap{ KitapID=123, KitapAdi="Denemeler",Fiyat=45 },
           new Kitap{ KitapID=125, KitapAdi="Cehennem",Fiyat=65 },
           new Kitap{ KitapID=166, KitapAdi="Baslangic",Fiyat=85 },
           new Kitap{ KitapID=184, KitapAdi="Falaka",Fiyat=44 },
           new Kitap{ KitapID=189, KitapAdi="Kasagi",Fiyat=52 }
        };

        [HttpGet]
        public IActionResult TumKitaplar()
        {
            return Ok(_kitaplar);	//GENEL KULLANIM
        }

        [HttpGet("ara")]
        public IActionResult KitapAra(int? kitapId)
        {
            return Ok(_kitaplar.Find(x=>x.KitapID==kitapId));
        }

        //Veriler  QueryString uzerinden gider...
        //[HttpPost]
        //public IActionResult Ekle(int kitapId ,string kitapAdi, double fiyat) {
        //    Kitap kitap = new Kitap { KitapID = kitapId, KitapAdi = kitapAdi, Fiyat = fiyat };

        //    _kitaplar.Add(kitap);

        //    return Ok("Ekleme Islemi basarili...");

        //}

        [HttpPost]
        public IActionResult Ekle(Kitap kitap)		//MODEL BINDER GELEN TİPLERE GÖRE ARKADA KENDİSİ HALLEDİYOR. ŞİMDİ SWAGGER DA REQUEST BODY İÇİNDEKİ JSON DOSYA İÇİNE VERİLERİ GİRDİK. VERİYİ JSON OLARAK GÖNDER DİYOR YANİ.
        {
            _kitaplar.Add(kitap);

            return Ok("Ekleme Islemi basarili...");

        }

        [HttpPut]
        public IActionResult Guncelle(Kitap kitap)
        {
            //Guncelle
            int id = kitap.KitapID;
            var aranılanKitap = _kitaplar.Find(x=>x.KitapID == id);
            if (aranılanKitap == null)
                return BadRequest("Aranılan kitap bulanamadi...");
            aranılanKitap.KitapAdi = kitap.KitapAdi;		//BU SATIR VE ALTINDAKİ SATIR OLMADAN DA ÇALIŞIYORMU DENE!!!  BİRDE POSTMAN İLE DENE!!!
            aranılanKitap.Fiyat = kitap.Fiyat;
            
            return Ok("Guncelleme Islemi basarili...");

        }

        [HttpDelete]
        public IActionResult Sil(int id)	//EYLEM SİLME EYLEMİ. GERÇEKTE SİLMEYİP PASİFE ALSAK BİLE BU EYLEM ÜZERİNDEN GELMELİ. O SİLİNDİ SANSIN.
        {
            var kitap = _kitaplar.Find(x => x.KitapID == id);
            _kitaplar.Remove(kitap);
            return Ok("Kitap isilindi...");
        }


    }
}

-----------------------------

1- Proje içerisinde yukarıdaki şekilde bir webAPI rpojesi açtık.

2- properties - current selection apply

3- nuget üzerinden her biri için proje adları kliklenip aynı versiyon no seçilerek kurulum yapılır. Microsoft.EntityFrameworkCore, Microsoft.EntityFrameworkCore.SqlServer, Microsoft.EntityFrameworkCore.Tools
packagesten kontrol et.

4- Models klasörü açtık ve aşağıdakileri oluşturduk.

namespace WebAPI_Book.Models
{
    public class Book
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public decimal BookPrice { get; set; }

        public int? CategoryID { get; set; }
        public Category? Category { get; set; }
    }
}



namespace WebAPI_Book.Models
{
    public class Book_VM
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public decimal BookPrice { get; set; }
        public string CategoryName { get; set; }
        
    }
}



using Microsoft.EntityFrameworkCore;

namespace WebAPI_Book.Models
{
    public class BookContext:DbContext
    {
        public BookContext(DbContextOptions<BookContext> options):base(options) 
        {
            
        }

        public DbSet<Book> Books { get; set; }
        public DbSet<Category> Categories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            modelBuilder.Entity<Category>().HasData(
                new Category { CategoryID=1, CategoryName="Deneme" },
                new Category { CategoryID=2, CategoryName="Roman" },
                new Category { CategoryID=3, CategoryName="Hikaye" },
                new Category { CategoryID=4, CategoryName="Atlas" }
                );

            modelBuilder.Entity<Book>().HasData(
                new Book { BookID=1, BookName="Denemeler", BookPrice=56, CategoryID=1 },
                new Book { BookID=2, BookName="Baslangic", BookPrice=78, CategoryID=2 },
                new Book { BookID=3, BookName="Suc ve Ceza", BookPrice=45, CategoryID=2 },
                new Book { BookID=4, BookName="Dunya Atlasi", BookPrice=560, CategoryID=4 }
                );
        }
    }
}



namespace WebAPI_Book.Models
{
    public class Category
    {
        public int CategoryID { get; set; }
        public string CategoryName { get; set; }

        public ICollection<Book>? Books { get; set; }
    }
}



5- appsettings.json dosyasına connection string ekledik.

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {"ConnStr": "Data source=.;initial catalog=YZL3440_BookDB_API;integrated security=true"}, 
  "AllowedHosts": "*"
}




6- program.cs içine ekledik.


dikkat builder.Services.AddControllers(); altına

builder.Services.AddDbContext<BookContext>(x => x.UseSqlServer(builder.Configuration.GetConnectionString("ConnStr")));




7- migration yaptık dikkat migration yaparken hem yukarıdan seçili olması lazım hem de ekranda o projenin açık olması lazım. Veritabanı ve tablolar oluştu, kontrol edildi.


8- controllers üzerinde sağ tık - Add - controller - sol taraftan API - (listedeki alttan iki tanesi minimal API için) API Controller with actions, using Entity Framework seçtik - Add - Model class book, dbcontext bookdbcontext, controllername BooksController - Add
Hata vermişti. SQLLite silmiştik, yeniden kendisi getirid, yazdı.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAPI_Book.Models;

namespace WebAPI_Book.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BookController : ControllerBase
    {
        private readonly BookContext _context;

        public BookController(BookContext context)
        {
            _context = context;
        }

        // GET: api/Book
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Book>>> GetBooks()
        {
          if (_context.Books == null)
          {
              return NotFound();
          }
            return await _context.Books.ToListAsync();
        }

//scaffolda eklenen action

        [HttpGet("WithCategories")]
        public async Task<ActionResult<List<Book_VM>>> GetBooksWithCategories()
        {
            if (_context.Books == null)
            {
                return NotFound();
            }
										//BURAYI VM OLMADAN ANYNOMUS İLE YAZMAYI DENE.
            List<Book_VM> books = new List<Book_VM>();
            foreach (var book in _context.Books.Include("Category"))
            {
                books.Add(new Book_VM() {
                     BookID= book.BookID, 
                     BookName = book.BookName,
                     BookPrice =book.BookPrice,
                     CategoryName = book.Category.CategoryName });
            }

            return  books ;
        }

//

        // GET: api/Book/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Book>> GetBook(int id)
        {
          if (_context.Books == null)
          {
              return NotFound();
          }
            var book = await _context.Books.FindAsync(id);

            if (book == null)
            {
                return NotFound();
            }

            return book;
        }

        // PUT: api/Book/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutBook(int id, Book book)
        {
            if (id != book.BookID)
            {
                return BadRequest();
            }

            _context.Entry(book).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!BookExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Book
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Book>> PostBook(Book book)
        {
          if (_context.Books == null)
          {
              return Problem("Entity set 'BookContext.Books'  is null.");
          }
            _context.Books.Add(book);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetBook", new { id = book.BookID }, book);
        }

        // DELETE: api/Book/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteBook(int id)
        {
            if (_context.Books == null)
            {
                return NotFound();
            }
            var book = await _context.Books.FindAsync(id);
            if (book == null)
            {
                return NotFound();
            }

            _context.Books.Remove(book);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool BookExists(int id)
        {
            return (_context.Books?.Any(e => e.BookID == id)).GetValueOrDefault();
        }
    }
}




Program.cs içine aşağıdaki eklenecek. DİKKAT!!! HOCA WebAPI YE EKLEDİ. ONDAN ÇALIŞMAMIŞ OLABİLİR. BURASI WebAPI_Book. HEM CLIENT HEM SERVİS PROGRAM.CS EKLENECEK.

app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

-------- app.UseAuthorization(); üstüne yukarıdaki eklenecek.




9- Çalıştırdık ve ön tanımlı verilerin gelip gelmediğini kontrol ettik.


10- Client yazmaya başlıyoruz.
Book tablosunda category name yok gelmesi için ya VM oluşturup, include ile çekip yeni bir nesne oluşturup göndermek gerekiyor veya join ve sonrasında anynomus object oluşturup teker teker söyleyerek göndermek gerekiyor. Yukarıda örnek var.

Servisleri olusturduktan sonra Client tarafında yapılacaklar...

Clients
  1-Düz HTML Sayfası...(AJAX, Fetch)JS - Bu biraz farklı.

  2-MVC
  3-Window Forms 
  4-Console
  (2,3,4 => HttpClient) Bu nesneyi kullanacağız.



10.a Add - new project - console app - Console_Client - Next - net6.0 ve do not use kliksiz - Create

EN ÖNEMLİ KONULARDAN BİRİ; HEM SERVİS UYGULAMASININ HEM DE CLIENT UYGULAMASININ ÇALIŞMASI GEREKİYOR. YANLIŞLIKLA KAPATMA.

nuget - newtonsoft.json - solution seç - versiyon seç - install


-------	DESERIALIZE İÇİN DİKKAT!!! 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Console_Client
{
    internal class Book
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public decimal BookPrice { get; set; }

        public int CategoryID { get; set; }

        public override string ToString()		//GÖRSELİ TOPARLAMAK İÇİN EZDİK.
        {
            return $"{BookID} {BookName} {BookPrice} {CategoryID}";
        }
    }
}


------

Program.cs dosyası;

using Console_Client;
using Newtonsoft.Json;	//DİKKAT EKLE.

// See https://aka.ms/new-console-template for more information
Console.WriteLine("Book Service Client");

HttpClient client = new HttpClient();

string strJSON = client.GetStringAsync("http://localhost:5278/api/Book").Result;	//GetStringAsync metodu geriye Task tipinde değer döndürüyor fakat bizden request uriyani adresi istiyor. 														//swaggerdaki request url kopyala yapıştır buraya.

Console.WriteLine(strJSON);	//yukarıdaki url in verilerini gördük. CTRL+F5 ile çalıştır.



//Gelen veriler string(düzenlemek için split kullanılabilir). Bunların objeye çevrilmesi gerekiyor. 

var kitaplar= JsonConvert.DeserializeObject<List<Book>>(strJSON);	//JsonConvert.DeserializeObject KÜTÜPHANEDEN GELİYOR. DİKKAT!!! JSON A BAKARAK BOOK CLASSI OLUŞTURULUR. JSON PROPERTYLERİNDEN GELEN 										//İSİMLERLE CLASS İÇİNDEKİ PROPERTY İSİMLERİ AYNI OLMALI. 

foreach (var book in kitaplar)		//ARTIK RAMDE VAR.
{
    Console.WriteLine(book);
}






10.b Add - new project - windows form app - Next - Wnd_Client - net6.0 - create

form açılmadı.







10.c Add - new project - ASP.NET core web app (MVC) - Next - WebApp_Client - net 6.0 , auth none, configure klikli, enable docker kliksiz, do not use kliksiz - Create

nuget - newtonsoft.json - solution seç - versiyon seç - install

properties içinden multiple startup projects listesi içinde hem clienti hem de servisi start without debugging seç - Apply

wwwroot sağ tık - add - new item - html page - kitap.html - create

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title></title>
    <script>
        function showData(json) {
            let div = document.getElementById("data");
            div.innerHTML = json;
        }
        function getAJAX()
        {
            let xhr = new XMLHttpRequest();

		//evente delege bağlıyoruz, DİKKAT!!!
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    showData(xhr.responseText);
                }
            };

            xhr.open("GET","http://localhost:5278/api/Book/WithCategories",true);
            xhr.send();

        }

        async function getFetch()
        {
            let data;
            fetch("http://localhost:5278/api/Book/WithCategories").then(x => x.text()).then(x => { data = x });

            showData(data);
        }
    </script>
</head>
<body>
    <button onclick="getAJAX()">AJAX GET</button>	//önce butona basıldığında hata verdi. developer toolstan cors policy hatası. Program.cs içine eklendi. Düz sayfalardan erişim güvenliği için.
    <button onclick="getFetch()">Fetch GET</button>

    <div id="data"></div>
</body>
</html>




Program.cs içine aşağıdaki eklenecek. DİKKAT!!! HOCA WebAPI YE EKLEDİ. ONDAN ÇALIŞMAMIŞ OLABİLİR. BURASI WebAPI_Book. HEM CLIENT HEM SERVİS PROGRAM.CS EKLENECEK.

app.UseCors(x => x.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod());

-------- app.UseAuthorization(); üstüne yukarıdaki eklenecek.




namespace WebApp_Client.Models
{
    public class Book
    {
        public int BookID { get; set; }
        public string BookName { get; set; }
        public decimal BookPrice { get; set; }

        public string CategoryName { get; set; }
    }
}




Controller üzerinde sağ tık - add - controller - empty - add - TestController

using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using WebApp_Client.Models;

namespace WebApp_Client.Controllers
{
    public class TestController : Controller
    {
        public IActionResult Index()
        {
            HttpClient client = new HttpClient();

            string strJSON = client.GetStringAsync("http://localhost:5278/api/Book/WithCategories").Result;

            var books = JsonConvert.DeserializeObject<List<Book>>(strJSON);

            //return Content(strJSON);		//json formatı düz yazı olarak getirdik ama obje deiğil.
            return View(books);
        }
    }
}




Panel klasörü altındaki Index.cshtml

@model IEnumerable<Book>

<table class="table table-striped">
    @foreach(var kitap in Model)
    {
        <tr>
            <td>@kitap.BookID</td>
            <td>@kitap.BookName</td>
            <td>@kitap.BookPrice</td>
            <td>@kitap.CategoryName</td>
        </tr>
    }
</table>




